!WF:MEDIATION_LAYER:PHYSICS
! *** add new modules of schemes here
!
MODULE module_microphysics_driver
CONTAINS

SUBROUTINE microphysics_driver(				 &
! >>>> Dynamic variables
		      dt, dx, dy, dz8w, itimestep, p8w, p, pi_phy, rho   &
		     ,th, th_pg, t8w, t8w_pg, sr, sr_pg, id, w, z, ht	 &
		     ,refl_10cm,refl_10cm_pg, tbpvs0_state,tbpvs_state	 &
		     ,f_ice_phy, f_rain_phy, f_rimef_phy		 &
		     ,lowlyr, spec_zone, warm_rain, cldfra, exch_h       &
		     ,nsource, xland, snowh, specified, channel_switch   &
		     ,qlsink, cldfra_old, precr, preci, precs, precg     &
		     ,chem_opt, progn					 &
		     ,u, v, xlat, xlong, ivgtyp, height, tempc, ccn_conc &
#if ( WRF_CHEM == 1 )
                     ,chem, qme3d, prain3d, nevapr3d, ,dgnum4D           &
     		     ,dgnumwet4D, rate1ord_cw2pr_st3d                    &
#endif
		     ,mp_physics, mp_physics_pg, mp_restart_state   	 &
		     ,t_old, t_old_pg, moist_old, moist, scalar_old      &
		     ,n_moist, n_scalar, ssw, ssi, ssw_pg, ssi_pg        &
		     ,scalar, num_scalar_x                               &
		     ,th_old, th_old_pg, qv_old, qv_old_pg               &
                     ,DNW_ACTV,DNW_COAG,DNW_BRUP,DNI_COLL,DMW_DIFF       &  ! for mp_detailed
                     ,DMW_MELT,DMI_DIFF,DMWI_MELT,DMWI_DIFF,DMW_RIME     &  ! for mp_detailed
                     ,DMW_FREZ,DMG_RIME                                  &  ! for mp_detailed
                     ,DNW_ACTV_PG,DNW_COAG_PG,DNW_BRUP_PG,DNI_COLL_PG    &
	  	     ,DMW_DIFF_PG,DMW_MELT_PG,DMI_DIFF_PG,DMWI_MELT_PG   &
		     ,DMWI_DIFF_PG,DMW_RIME_PG,DMW_FREZ_PG,DMG_RIME_PG   &
                     ,ids,ide, jds,jde, kds,kde                          &
                     ,ims,ime, jms,jme, kms,kme                          &
                     ,ips,ipe, jps,jpe, kps,kpe                          &
                     ,i_start,i_end,j_start,j_end,kts,kte                &
                     ,num_tiles, naer                                    &
		     ,dlf,dlf2,t_phy,t_phy_pg, p_hyd,p8w_hyd,tke_pbl     &
                     ,z_at_w,qfx,qfx_pg				         &
                     ,rliq,turbtype3d,smaw3d,wsedl3d,cldfra_old_mp       &
                     ,cldfra_mp,cldfra_mp_all,lradius,iradius            &
                     ,cldfrai,cldfral,cldfra_conv,alt                    &
                     ,accum_mode,aitken_mode,coarse_mode                 &
                     ,icwmrsh3d,icwmrdp3d,shfrc3d,cmfmc3d,cmfmc2_3d      &
                     ,config_flags,fnm,fnp,rh_old_mp,lcd_old_mp          &
                     ,rainnc,    rainncv                                 &
                     ,snownc,    snowncv                                 &
                     ,hailnc,    hailncv                                 &
                     ,graupelnc, graupelncv                              &
                     ,rainncpg,    rainncvpg                             &
                     ,snowncpg,    snowncvpg                             &
                     ,hailncpg,    hailncvpg                             &
                     ,graupelncpg, graupelncvpg                          &
                     ,qv_curr,qc_curr,qr_curr,qi_curr,qs_curr,qg_curr    &
		     ,fx_qv, fx_qc, fx_qr, fx_qi, fx_qs, fx_qg           &
		     ,qh_curr, qic_curr, qip_curr, qid_curr, qndrop_curr &
		     ,fx_qh, fx_qic, fx_qip, fx_qid, fx_qndrop           &
#if ( WRF_CHEM == 1 )
                     ,rainprod, evapprod                                 &
                     ,qv_b4mp, qc_b4mp, qi_b4mp, qs_b4mp                 &
#endif
		     ,qt_curr, qnn_curr, qni_curr, qnc_curr, qnr_curr    &
		     ,fx_qt, fx_qnn, fx_qni, fx_qnc, fx_qnr		 &
		     ,qns_curr, qng_curr, qnwfa_curr, qnifa_curr         &
		     ,fx_qns, fx_qng, fx_qnwfa, fx_qnifa		 &
		     ,qnh_curr, qnic_curr, qnip_curr, qnid_curr		 &
		     ,fx_qnh, fx_qnic, fx_qnip, fx_qnid			 &
		    ! ,qzr_curr, qzi_curr, qzs_curr, qzg_curr, qzh_curr   &
		    ! ,f_qzr, f_qzi, f_qzs, f_qzg, f_qzh                  &
	             ,qvolg_curr, qvolh_curr				 &
		     ,fx_qvolg, fx_qvolh				 &
                     ,qa1_curr, qa1c_curr, qa1r_curr, qa1i_curr          &
		     ,fx_qa1, fx_qa1c, fx_qa1r, fx_qa1i                  &
		     ,qa1s_curr, qa1g_curr, qna1_curr, qna1c_curr        &
		     ,fx_qa1s, fx_qa1g, fx_qna1, fx_qna1c                &
		     ,qna1r_curr, qna1i_curr, qna1s_curr, qna1g_curr     &
		     ,fx_qna1r, fx_qna1i, fx_qna1s, fx_qna1g             &
		     ,qrcuten_pg, qscuten_pg, qicuten_pg                 &  ! MORR_TWO_MOMENT TEST PIGGYBACK, 2018. 06. 29. Added by SN
		     ,qrcuten, qscuten, qicuten, mu, hail, ice2          &
                    ! , ccntype			     	   		  &
		     ,ri_curr, re_cloud, re_ice, re_snow, has_reqc       &
		     ,has_reqi, has_reqs, qnwfa2d, qnwfa2d_pg            &
		     ,diagflag, do_radar_ref, diagpiggy, do_piggyback    &
		     ,effr_curr, ice_effr_curr, tot_effr_curr            &
		     ,fx_effr, fx_ice_effr, fx_tot_effr                  &
		     ,qic_effr_curr, qip_effr_curr, qid_effr_curr        &
		     ,fx_qic_effr, fx_qip_effr, fx_qid_effr              &
		     ,kext_ql, kext_qs, kext_qg, kext_qh, kext_qa        &
		     ,kext_qic, kext_qip, kext_qid, kext_ft_qic          &
		     ,kext_ft_qip, kext_ft_qid, kext_ft_qs, kext_ft_qg   &
! >>> Piggybacking					 
                 ,qv_pg_curr,qc_pg_curr,qr_pg_curr,qi_pg_curr,qs_pg_curr &
                 ,qg_pg_curr    &
		 ,fx_pg_qv, fx_pg_qc, fx_pg_qr, fx_pg_qi, fx_pg_qs, fx_pg_qg           &
		 ,qh_pg_curr, qic_pg_curr, qip_pg_curr, qid_pg_curr, qndrop_pg_curr &
		 ,fx_pg_qh, fx_pg_qic, fx_pg_qip, fx_pg_qid, fx_pg_qndrop           &                                                   
		 ,qt_pg_curr, qnn_pg_curr, qni_pg_curr, qnc_pg_curr, qnr_pg_curr    &
		 ,fx_pg_qt, fx_pg_qnn, fx_pg_qni, fx_pg_qnc, fx_pg_qnr		 &
		 ,qns_pg_curr, qng_pg_curr, qnwfa_pg_curr, qnifa_pg_curr         &
		 ,fx_pg_qns, fx_pg_qng, fx_pg_qnwfa, fx_pg_qnifa		 &
		 ,qnh_pg_curr, qnic_pg_curr, qnip_pg_curr, qnid_pg_curr		 &
		 ,fx_pg_qnh, fx_pg_qnic, fx_pg_qnip, fx_pg_qnid			 &
		! ,qzr_pg_curr, qzi_pg_curr, qzs_pg_curr, qzg_pg_curr, qzh_pg_curr   &
		! ,f_pg_qzr, f_pg_qzi, f_pg_qzs, f_pg_qzg, f_pg_qzh                  &
	         ,qvolg_pg_curr, qvolh_pg_curr					 &
		 ,fx_pg_qvolg, fx_pg_qvolh				         &
                 ,qa1_pg_curr, qa1c_pg_curr, qa1r_pg_curr, qa1i_pg_curr          &
		 ,fx_pg_qa1, fx_pg_qa1c, fx_pg_qa1r, fx_pg_qa1i                  &
		 ,qa1s_pg_curr, qa1g_pg_curr, qna1_pg_curr, qna1c_pg_curr        &
		 ,fx_pg_qa1s, fx_pg_qa1g, fx_pg_qna1, fx_pg_qna1c                &
		 ,qna1r_pg_curr, qna1i_pg_curr, qna1s_pg_curr, qna1g_pg_curr     &
		 ,fx_pg_qna1r, fx_pg_qna1i, fx_pg_qna1s, fx_pg_qna1g             &				 
! <<< Piggybacking					 
									)

! Framework
#if(NMM_CORE==1)
   USE module_state_description, ONLY :                                  &
                     KESSLERSCHEME, LINSCHEME, SBU_YLINSCHEME, WSM3SCHEME, WSM5SCHEME    &
                    ,WSM6SCHEME, ETAMPNEW, ETAMP_HR, etamp_HWRF,THOMPSON, THOMPSONAERO, MORR_TWO_MOMENT     &
                    ,GSFCGCESCHEME, WDM5SCHEME, WDM6SCHEME, NSSL_2MOM, NSSL_2MOMCCN, NSSL_2MOMG  &
                    ,NSSL_1MOM,NSSL_1MOMLFO &
                    ,MILBRANDT2MOM    & !,MILBRANDT3MOM
! >>> PG microphysics schemes
                    ,KESSLERSCHEME_PG, LINSCHEME_PG, SBU_YLINSCHEME_PG, WSM3SCHEME_PG, WSM5SCHEME_PG    &
                    ,WSM6SCHEME_PG, ETAMPNEW_PG, ETAMP_HR_PG, etamp_HWRF_PG,THOMPSON_PG, THOMPSONAERO_PG, MORR_TWO_MOMENT_PG     &
                    ,GSFCGCESCHEME_PG, WDM5SCHEME_PG, WDM6SCHEME_PG, NSSL_2MOM_PG, NSSL_2MOMCCN_PG, NSSL_2MOMG_PG  &
                    ,NSSL_1MOM_PG,NSSL_1MOMLFO_PG &
                    ,MILBRANDT2MOM_PG !,MILBRANDT3MOM_PG
! >>> PG microphysics schemes					
#else
   USE module_state_description, ONLY :                                  &
                     KESSLERSCHEME, LINSCHEME, SBU_YLINSCHEME, WSM3SCHEME, WSM5SCHEME    &
                    ,WSM6SCHEME, ETAMPNEW, ETAMP_HR, THOMPSON, THOMPSONAERO, FAST_KHAIN_LYNN, MORR_TWO_MOMENT     &
                    ,GSFCGCESCHEME, WDM5SCHEME, WDM6SCHEME, NSSL_2MOM, NSSL_2MOMCCN, NSSL_2MOMG  &
                    ,NSSL_1MOM,NSSL_1MOMLFO & ! ,NSSL_3MOM       &
                    ,MILBRANDT2MOM , CAMMGMPSCHEME,FULL_KHAIN_LYNN & !,MILBRANDT3MOM
                    ,DETAILED
! >>> PG microphysics schemes
                    ,KESSLERSCHEME_PG, LINSCHEME_PG, SBU_YLINSCHEME_PG, WSM3SCHEME_PG, WSM5SCHEME_PG    &
                    ,WSM6SCHEME_PG, ETAMPNEW_PG, ETAMP_HR_PG, THOMPSON_PG, THOMPSONAERO_PG, MORR_TWO_MOMENT_PG     &  !FAST_KHAIN_LYNN_PG
                    ,GSFCGCESCHEME_PG, WDM5SCHEME_PG, WDM6SCHEME_PG, NSSL_2MOM_PG, NSSL_2MOMCCN_PG, NSSL_2MOMG_PG  &
                    ,NSSL_1MOM_PG,NSSL_1MOMLFO_PG & ! ,NSSL_3MOM_PG       &
                    ,MILBRANDT2MOM_PG , CAMMGMPSCHEME_PG & !,MILBRANDT3MOM_PG, FULL_KHAIN_LYNN_PG
! >>> PG microphysics schemes

#endif

#ifdef DM_PARALLEL
  USE module_dm, ONLY : &
                 local_communicator, mytask,  wrf_dm_min_real, wrf_dm_max_real
#endif

! Model Layer
   USE module_model_constants
   USE module_wrf_error
   USE module_configure, only: grid_config_rec_type
#if ( WRF_CHEM == 1 )   
!mchen   USE module_state_description, only: num_scalar_x_x               ! For CAMMGMP scheme Prognostic aerosols
   USE module_state_description, only: num_chem               ! mchen 
   USE modal_aero_data, only:  ntot_amode_cam_mam => ntot_amode ! For CAMMGMP scheme Prognostic aerosols
#endif

! *** add new modules of schemes here

   USE module_mp_kessler
   USE module_mp_lin
   USE module_mp_sbu_ylin
   USE module_mp_wsm3
   USE module_mp_wsm5
   USE module_mp_wsm6
   USE module_mp_etanew
   USE module_mp_thompson
   USE module_mp_detailed
   USE module_mp_full_sbm
   USE module_mp_fast_sbm
   USE module_mp_gsfcgce
   USE module_mp_morr_two_moment
   USE module_mp_wdm5
   USE module_mp_wdm6
   USE module_mp_milbrandt2mom
# if (EM_CORE == 1)
   USE module_mp_cammgmp_driver, ONLY: CAMMGMP ! CAM5's microphysics driver
# endif
!  USE module_mp_milbrandt3mom
#if (EM_CORE==1)
   USE module_mp_nssl_2mom
#endif

   USE module_mp_HWRF
   USE module_mixactivate, only: prescribe_aerosol_mixactivate

! For checking model timestep is history time (for radar reflectivity)
   USE module_utility, ONLY: WRFU_Clock, WRFU_Alarm
   USE module_domain, ONLY : HISTORY_ALARM, Is_alarm_tstep

!----------------------------------------------------------------------
   ! This driver calls subroutines for the microphys.
   !
   ! Schemes
   !
   ! Kessler scheme
   ! Lin et al. (1983), Rutledge and Hobbs (1984)
   ! WRF Single-Moment 3-class, Hong, Dudhia and Chen (2004)
   ! WRF Single-Moment 5-class, Hong, Dudhia and Chen (2004)
   ! WRF Single-Moment 6-class, Lim and Hong (2003 WRF workshop)
   ! Eta Grid-scale Cloud and Precipitation scheme (EGCP01, Ferrier)
   !   * etampnew - what's in the operational 4-km High-Resolution Window Runs
   ! Milbrandt and Yau (2005)

!----------------------------------------------------------------------
   IMPLICIT NONE
!======================================================================
! Grid structure in physics part of WRF
!----------------------------------------------------------------------
! The horizontal velocities used in the physics are unstaggered
! relative to temperature/moisture variables. All predicted
! variables are carried at half levels except w, which is at full
! levels. Some arrays with names (*8w) are at w (full) levels.
!
!----------------------------------------------------------------------
! In WRF, kms (smallest number) is the bottom level and kme (largest
! number) is the top level.  In your scheme, if 1 is at the top level,
! then you have to reverse the order in the k direction.
!
!         kme      -   half level (no data at this level)
!         kme    ----- full level
!         kme-1    -   half level
!         kme-1  ----- full level
!         .
!         .
!         .
!         kms+2    -   half level
!         kms+2  ----- full level
!         kms+1    -   half level
!         kms+1  ----- full level
!         kms      -   half level
!         kms    ----- full level
!
!======================================================================
! Definitions
!-----------
! Rho_d      dry density (kg/m^3)
! Theta_m    moist potential temperature (K)
! Qv         water vapor    mixing ratio (kg/kg)
! Qc         cloud water    mixing ratio (kg/kg)
! Qr         rain water     mixing ratio (kg/kg)
! Qi         cloud ice      mixing ratio (kg/kg)
! Qs         snow           mixing ratio (kg/kg)
! Qg         graupel        mixing ratio (kg/kg)
! Qh         hail           mixing ratio (kg/kg)
! Qndrop     droplet number mixing ratio (#/kg)
! Qni        cloud ice number concentration (#/kg)
! Qns        snow      number concentration (#/kg)
! Qnr        rain      number concentration (#/kg)
! Qng        graupel   number concentration (#/kg)
! Qnh        hail      number concentration (#/kg)

! Qzr        rain             reflectivity (m6/kg)
! Qzi        ice              reflectivity (m6/kg)
! Qzs        snow             reflectivity (m6/kg)
! Qzg        graupel          reflectivity (m6/kg)
! Qzh        hail             reflectivity (m6/kg)

! Qvolg        graupel   particle volume (m3/kg)

!
!----------------------------------------------------------------------
!-- th        potential temperature    (K)
!-- moist_new     updated moisture array   (kg/kg)
!-- moist_old     Old moisture array       (kg/kg)
!-- rho           density of air           (kg/m^3)
!-- pi_phy        exner function           (dimensionless)
!-- p             pressure                 (Pa)
!-- RAINNC        grid scale precipitation (mm)
!-- RAINNCV       one time step grid scale precipitation (mm/step)
!-- SNOWNC        grid scale snow and ice (mm)
!-- SNOWNCV       one time step grid scale snow and ice (mm/step)
!-- GRAUPELNC     grid scale graupel (mm)
!-- GRAUPELNCV    one time step grid scale graupel (mm/step)
!-- HAILNC        grid scale hail (mm)
!-- HAILNCV       one time step grid scale hail (mm/step)
!-- SR            one time step mass ratio of snow to total precip
!-- z             Height above sea level   (m)
!-- dt            Time step              (s)
!-- G             acceleration due to gravity  (m/s^2)
!-- CP            heat capacity at constant pressure for dry air (J/kg/K)
!-- R_d           gas constant for dry air (J/kg/K)
!-- R_v           gas constant for water vapor (J/kg/K)
!-- XLS           latent heat of sublimation   (J/kg)
!-- XLV           latent heat of vaporization  (J/kg)
!-- XLF           latent heat of melting       (J/kg)
!-- rhowater      water density                      (kg/m^3)
!-- rhosnow       snow density               (kg/m^3)
!-- F_ICE_PHY     Fraction of ice.
!-- F_RAIN_PHY    Fraction of rain.
!-- F_RIMEF_PHY   Mass ratio of rimed ice (rime factor)
!-- t8w           temperature at layer interfaces
!-- cldfra, cldfra_old, current, previous cloud fraction
!-- exch_h        vertical diffusivity (m2/s)
!-- qlsink        Fractional cloud water sink (/s)
!-- precr         rain precipitation rate at all levels (kg/m2/s)
!-- preci         ice precipitation rate at all levels (kg/m2/s)
!-- precs         snow precipitation rate at all levels (kg/m2/s)
!-- precg         graupel precipitation rate at all levels (kg/m2/s)                             &
!-- P_QV          species index for water vapor
!-- P_QC          species index for cloud water
!-- P_QR          species index for rain water
!-- P_QI          species index for cloud ice
!-- P_QS          species index for snow
!-- P_QG          species index for graupel
!-- P_QH          species index for hail
!-- P_QNDROP      species index for cloud drop mixing ratio
!-- P_QNR         species index for rain number concentration,
!-- P_QNI         species index for cloud ice number concentration
!-- P_QNS         species index for snow number concentration,
!-- P_QNG         species index for graupel number concentration,
!-- P_QNH         species index for hail number concentration,
!-- P_QZR         species index for rain    reflectivity
!-- P_QZI         species index for ice     reflectivity
!-- P_QZS         species index for snow    reflectivity
!-- P_QZG         species index for graupel reflectivity
!-- P_QZH         species index for hail    reflectivity
!-- P_QVOLG       species index for graupel particle volume,
!-- id            grid id number
!-- ids           start index for i in domain
!-- ide           end index for i in domain
!-- jds           start index for j in domain
!-- jde           end index for j in domain
!-- kds           start index for k in domain
!-- kde           end index for k in domain
!-- ims           start index for i in memory
!-- ime           end index for i in memory
!-- jms           start index for j in memory
!-- jme           end index for j in memory
!-- kms           start index for k in memory
!-- kme           end index for k in memory
!-- i_start       start indices for i in tile
!-- i_end         end indices for i in tile
!-- j_start       start indices for j in tile
!-- j_end         end indices for j in tile
!-- its           start index for i in tile
!-- ite           end index for i in tile
!-- jts           start index for j in tile
!-- jte           end index for j in tile
!-- kts           start index for k in tile
!-- kte           end index for k in tile
!-- num_tiles     number of tiles
!-- diagflag      Logical to tell us when to produce diagnostics for history or restart
!
!======================================================================
  INTEGER,parameter :: iunit=6
  INTEGER :: mpi_error_code=1

   TYPE(grid_config_rec_type),  INTENT(IN   ) , OPTIONAL   :: config_flags
   INTEGER,    INTENT(IN   )    :: mp_physics
   INTEGER,    INTENT(IN   )    :: mp_physics_pg
   LOGICAL,    INTENT(IN   )    :: specified
   INTEGER, OPTIONAL, INTENT(IN   )    :: chem_opt, progn
   INTEGER, OPTIONAL, INTENT(IN   )    :: hail, ice2  !, ccntype
!
   INTEGER,      INTENT(IN   )    ::       ids,ide, jds,jde, kds,kde
   INTEGER,      INTENT(IN   )    ::       ims,ime, jms,jme, kms,kme,num_scalar_x
   INTEGER, OPTIONAL, INTENT(IN   )    ::       ips,ipe, jps,jpe, kps,kpe
   INTEGER,      INTENT(IN   )    ::                         kts,kte
   INTEGER,      INTENT(IN   )    ::     itimestep,num_tiles,spec_zone
   INTEGER, DIMENSION(num_tiles), INTENT(IN) ::                       &
     &           i_start,i_end,j_start,j_end

   LOGICAL,      INTENT(IN   )    ::   warm_rain
!
   REAL, DIMENSION( ims:ime , kms:kme , jms:jme ),                    &
         INTENT(INOUT) ::                                         th
   REAL, DIMENSION( ims:ime , kms:kme , jms:jme ),                    &
         INTENT(INOUT), OPTIONAL ::                   th_pg
!

!
   REAL, DIMENSION( ims:ime , kms:kme , jms:jme ),                    &
         INTENT(IN   ) ::                                             &
                                                                 rho, &
                                                                dz8w, &
                                                                 p8w, &
                                                              pi_phy, &
                                                                   p
    REAL, DIMENSION( ims:ime , kms:kme , jms:jme ),INTENT(INOUT), OPTIONAL :: th_old,qv_old
    REAL, DIMENSION( ims:ime , kms:kme , jms:jme ),INTENT(INOUT), OPTIONAL :: th_old_pg,qv_old_pg
!    REAL,DIMENSION(ims:ime,kms:kme,jms:jme,num_scalar_x),INTENT(INOUT), OPTIONAL   :: scalar
    INTEGER, DIMENSION( ims:ime , jms:jme ), INTENT(IN), OPTIONAL::   IVGTYP
    REAL, DIMENSION( ims:ime, jms:jme ), INTENT(IN), OPTIONAL    :: XLAT, XLONG

!=================
!Data for CAMMGMP scheme
   REAL,INTENT(IN), OPTIONAL ::accum_mode,aitken_mode,coarse_mode  
!1D variables required for CAMMGMP scheme
   REAL , DIMENSION( kms:kme ) ,                                      &
        INTENT(IN   ) , OPTIONAL ::                                        fnm,  & !Factors for interpolation at "w" grid (interfaces)
                                                                fnp     
!2D variables required for CAMMGMP scheme
   REAL, DIMENSION( ims:ime, jms:jme ),                               &
        INTENT(IN), OPTIONAL ::                                                 &
                                                                 qfx,qfx_pg, &    !Moisture flux at surface (kg m-2 s-1)
                                                                 rliq      !Vertically-integrated reserved cloud condensate(m/s)
 
 !3D variables required for CAMMGMP scheme
 REAL, DIMENSION( ims:ime, kms:kme, jms:jme ),                        &
      INTENT(IN), OPTIONAL ::                                                   &
                                                                 dlf, &    !Detraining cloud water tendendcy
                                                                dlf2, &    !dq/dt due to export of cloud water into environment by shallow convection(kg/kg/s)
                                                               t_phy, &    !Temprature at the mid points (K)
			  				     t_phy_pg,&
                                                               p_hyd, &    !Hydrostatic pressure(Pa)
                                                             p8w_hyd, &    !Hydrostatic Pressure at level interface (Pa)
                                                              z_at_w, &    !Height above sea level at layer interfaces (m) 
                                                             tke_pbl, &    !Turbulence kinetic energy
                                                          turbtype3d, &    !Turbulent interface types [ no unit ]
                                                              smaw3d, &    !Normalized Galperin instability function for momentum  ( 0<= <=4.964 and 1 at neutral ) [no units]
                                                                 alt, &    !inverse density(m3/kg)
                                                           icwmrsh3d, &    !Shallow cumulus in-cloud water mixing ratio (kg/m2)
                                                           icwmrdp3d, &    !Deep Convection in-cloud water mixing ratio (kg/m2)
                                                             shfrc3d, &    !Shallow cloud fraction
                                                             cmfmc3d, &    !Deep + Shallow Convective mass flux [ kg /s/m^2 ]
                                                           cmfmc2_3d       !Shallow convective mass flux [ kg/s/m^2 ]
#if ( WRF_CHEM == 1 )
!4D variables required for CAMMGMP scheme
 REAL, OPTIONAL, DIMENSION( ims:ime, kms:kme, jms:jme,ntot_amode_cam_mam ),     &
        INTENT(IN) ::                                                 &
                                                             dgnum4D, &
                                                          dgnumwet4D 
#endif
!In-outs
 REAL, DIMENSION( ims:ime, kms:kme, jms:jme ),                        &
      INTENT(INOUT) , OPTIONAL ::                                                &
                                                       cldfra_old_mp, &    !Old Cloud fraction for CAMMGMP microphysics only
                                                           rh_old_mp, &    !Old RH
                                                          lcd_old_mp       !Old liquid cloud fraction
!In-outs -optional
#if ( WRF_CHEM == 1 )
 REAL, OPTIONAL, DIMENSION( ims:ime, kms:kme, jms:jme, num_chem),     &
      INTENT(INOUT) ::                                                &
                                                                 chem      !Chem array for CAMMGMP scheme Prognostic aerosols      
#endif
!outs
REAL, DIMENSION( ims:ime, kms:kme, jms:jme ),                        &
      INTENT(INOUT) , OPTIONAL::                                                 &
                                                            wsedl3d, &    !Sedimentation velocity of stratiform liquid cloud droplet (m/s) 
                                                          cldfra_mp, &    !Old Cloud fraction for CAMMGMP microphysics only
                                                      cldfra_mp_all, &    !Old Cloud fraction for CAMMGMP microphysics only
                                                            cldfrai, &    !Old Cloud fraction for CAMMGMP microphysics only
                                                            cldfral, &    !Old Cloud fraction for CAMMGMP microphysics only
                                                            lradius, &    !Old Cloud fraction for CAMMGMP microphysics only
                                                            iradius, &    !Old Cloud fraction for CAMMGMP microphysics only                                                            
                                                        cldfra_conv 
#if ( WRF_CHEM == 1 )
REAL, DIMENSION( ims:ime, kms:kme, jms:jme ),                        &
      INTENT(INOUT), OPTIONAL ::                                                 &
                                                              qme3d, &     !Net condensation rate (kg/kg/s)
                                                            prain3d, &     !Rate of conversion of condensate to precipitation (kg/kg/s)
                                                           nevapr3d, &     !Evaporation rate of rain + snow (kg/kg/s)
                                                rate1ord_cw2pr_st3d        !1st order rate for direct conversion of strat. cloud water to precip (1/s)
#endif

   REAL, INTENT(INOUT),  DIMENSION(ims:ime, kms:kme, jms:jme ) ::     &
                                     F_ICE_PHY,F_RAIN_PHY,F_RIMEF_PHY
!!$#if ( WRF_CHEM == 1 )
!  REAL, INTENT(OUT), DIMENSION(ims:ime, kms:kme, jms:jme ) ::     &
   REAL, OPTIONAL, INTENT(OUT), DIMENSION(ims:ime, kms:kme, jms:jme ) ::     &
!!$#else
!!$  REAL, DIMENSION(ims:ime, kms:kme, jms:jme ) ::     &
!!$#endif
         qlsink, & ! cloud water sink (/s)
         precr, & ! rain precipitation rate at all levels (kg/m2/s)
         preci, & ! ice precipitation rate at all levels (kg/m2/s)
         precs, & ! snow precipitation rate at all levels (kg/m2/s)
         precg    ! graupel precipitation rate at all levels (kg/m2/s)

!

   REAL , DIMENSION( ims:ime , jms:jme ) , INTENT(IN)   :: XLAND
   REAL , DIMENSION( ims:ime , jms:jme ) , INTENT(IN), OPTIONAL   :: SNOWH

   REAL , DIMENSION( ims:ime , jms:jme ) , INTENT(OUT)   :: SR
   REAL , DIMENSION( ims:ime , jms:jme ) , INTENT(OUT), OPTIONAL  :: SR_PG

   REAL, INTENT(IN   ) :: dt,dx,dy

   INTEGER, DIMENSION( ims:ime , jms:jme ), INTENT(INOUT) :: LOWLYR

!
! Optional
!
   REAL, OPTIONAL, DIMENSION( ims:ime , kms:kme, jms:jme ) , INTENT(OUT) :: refl_10cm
   REAL, OPTIONAL, DIMENSION( ims:ime , kms:kme, jms:jme ) , INTENT(OUT) :: refl_10cm_pg

   LOGICAL,  OPTIONAL,   INTENT(IN   )    :: channel_switch
   REAL, OPTIONAL,  INTENT(INOUT   ) :: naer  ! aerosol number concentration (/kg)
   REAL, DIMENSION( ims:ime, jms:jme ), INTENT(IN) , OPTIONAL :: qnwfa2d,qnwfa2d_pg      ! Added by G. Thompson
   REAL, DIMENSION( ims:ime, kms:kme, jms:jme ),                  &
         OPTIONAL,                                                &
         INTENT(INOUT ) ::                                        &
                  u,v,w, z, t8w                                       &
                 ,cldfra, cldfra_old, exch_h                      &
                 ,qv_curr,qc_curr,qr_curr,qi_curr,qs_curr,qg_curr &
                 ,qt_curr,qndrop_curr,qni_curr,qh_curr,qnh_curr   &
                 ,qns_curr,qnr_curr,qng_curr,qnn_curr,qnc_curr    &
                 ,qic_curr,qip_curr,qid_curr &
                 ,qnic_curr,qnip_curr,qnid_curr &
 !                ,qzr_curr,qzi_curr,qzs_curr,qzg_curr,qzh_curr    &
                 ,effr_curr,ice_effr_curr,tot_effr_curr           &
                 ,qic_effr_curr,qip_effr_curr,qid_effr_curr           &
                  ,kext_ql,kext_qs,kext_qg          &
                 ,kext_qh,kext_qa                       &
                 ,kext_qic,kext_qip,kext_qid,tempc,height      &
                 ,kext_ft_qic,kext_ft_qip,kext_ft_qid &
                 ,kext_ft_qs,kext_ft_qg                           &
                 ,qnwfa_curr,qnifa_curr                           & ! Added by G. Thompson
                 ,qvolg_curr,qvolh_curr                           

! >>>> PG variables
   REAL, DIMENSION( ims:ime, kms:kme, jms:jme ),                  &
         OPTIONAL,                                                &
         INTENT(INOUT ) ::                                        &
                  t8w_pg                                       &
                 ,qv_pg_curr,qc_pg_curr,qr_pg_curr,qi_pg_curr,qs_pg_curr &
                 ,qg_pg_curr &
                 ,qt_pg_curr,qndrop_pg_curr,qni_pg_curr,qh_pg_curr       &
                 ,qnh_pg_curr   &
                 ,qns_pg_curr,qnr_pg_curr,qng_pg_curr,qnn_pg_curr        &
                 ,qnc_pg_curr    &
                 ,qic_pg_curr,qip_pg_curr,qid_pg_curr &
                 ,qnic_pg_curr,qnip_pg_curr,qnid_pg_curr &
!                 ,qzr_pg_curr,qzi_pg_curr,qzs_pg_curr,qzg_pg_curr,qzh_pg_curr    &
                 ,qnwfa_pg_curr,qnifa_pg_curr                           & ! Added by G. Thompson
                 ,qvolg_pg_curr,qvolh_pg_curr                           

! >>>> PG variables


   REAL, DIMENSION( ims:ime, kms:kme, jms:jme ),                  &
         OPTIONAL,                                                &
         INTENT(IN) :: qrcuten, qscuten, qicuten
   REAL, DIMENSION( ims:ime, kms:kme, jms:jme ),                  &
         OPTIONAL,                                                &
         INTENT(IN) ::  qrcuten_pg, qscuten_pg, qicuten_pg     !! added by SN, 2018. June 29. for MORR_TWO_MOMENT TEST
#if ( WRF_CHEM == 1 )
   REAL, DIMENSION( ims:ime, kms:kme, jms:jme ),                  &
         INTENT(INOUT) :: rainprod, evapprod
   REAL, DIMENSION( ims:ime, kms:kme, jms:jme ),                  &
         INTENT(INOUT) :: qv_b4mp, qc_b4mp, qi_b4mp, qs_b4mp
#endif
   REAL, DIMENSION( ims:ime, jms:jme ),                           &
         OPTIONAL,                                                &
         INTENT(IN) :: mu
! YLIN
! Added RI_CURR similar to microphysics fields above
   REAL, DIMENSION( ims:ime, kms:kme, jms:jme ),                  &
         OPTIONAL,                                                &
         INTENT(INOUT) :: ri_curr


   REAL, DIMENSION(ims:ime, kms:kme, jms:jme ),                   &
         OPTIONAL,                                                &
         INTENT(OUT ) ::                                          &
                  nsource

!
   REAL, DIMENSION( ims:ime , jms:jme ),                          &
         INTENT(INOUT),                                           &
         OPTIONAL   ::                                            &
                                                           RAINNC &
                                                         ,RAINNCV &
                                                          ,SNOWNC &
                                                         ,SNOWNCV &
                                                       ,GRAUPELNC &
                                                      ,GRAUPELNCV &
                                                          ,HAILNC &
                                                         ,HAILNCV
! >>>> PG precipitation
   REAL, DIMENSION( ims:ime , jms:jme ),                          &
         INTENT(INOUT),                                           &
         OPTIONAL   ::                                            &
                                                         RAINNCPG &
                                                       ,RAINNCVPG &
                                                        ,SNOWNCPG &
                                                       ,SNOWNCVPG &
                                                     ,GRAUPELNCPG &
                                                    ,GRAUPELNCVPG &
                                                        ,HAILNCPG &
                                                       ,HAILNCVPG		 
! <<<< PG precipitation														 
   INTEGER,OPTIONAL,INTENT(IN   )    ::                        id

   REAL , DIMENSION( ims:ime , jms:jme ) , OPTIONAL ,             &
         INTENT(IN)   ::                                       ht

   REAL, DIMENSION (:), OPTIONAL, INTENT(INOUT) :: mp_restart_state &
                                         ,tbpvs_state,tbpvs0_state
!

   LOGICAL, OPTIONAL :: fx_qv,fx_qc,fx_qr,fx_qi,fx_qs,fx_qg,fx_qndrop,fx_qni,fx_qt    &
                       ,fx_qns,fx_qnr,fx_qng,fx_qnn,fx_qnc,fx_qh,fx_qnh       &
                       ,fx_effr,fx_ice_effr,fx_tot_effr &
                       ,fx_qic_effr,fx_qip_effr,fx_qid_effr &
                       ,fx_qic,fx_qip,fx_qid &
                       ,fx_qnic,fx_qnip,fx_qnid                                  &
!                       ,f_qzr,f_qzi,f_qzs,f_qzg,f_qzh    &
                       ,fx_qvolg,fx_qvolh              &
                       ,fx_qnwfa, fx_qnifa                         ! Added by G. Thompson

! >>>>> PG variables
   LOGICAL, OPTIONAL :: fx_pg_qv,fx_pg_qc,fx_pg_qr,fx_pg_qi,fx_pg_qs,fx_pg_qg,fx_pg_qndrop,fx_pg_qni    &
                       ,fx_pg_qns,fx_pg_qnr,fx_pg_qng,fx_pg_qnn,fx_pg_qnc,fx_pg_qh,fx_pg_qnh       &
                       ,fx_pg_qic,fx_pg_qip,fx_pg_qid                                              &
                       ,fx_pg_qnic,fx_pg_qnip,fx_pg_qnid,fx_pg_qt                                  &
!                       ,f_pg_qzr,f_pg_qzi,f_pg_qzs,f_pg_qzg,f_pg_qzh                              &
		       ,fx_pg_qvolg,fx_pg_qvolh 		        &
                       ,fx_pg_qnwfa, fx_pg_qnifa                    ! Added by G. Thompson

! >>>>> PG variables

   LOGICAL, OPTIONAL, INTENT(IN) :: diagflag
   LOGICAL, OPTIONAL, INTENT(IN) :: diagpiggy
   REAL, INTENT(IN) :: ccn_conc ! RAS
   INTEGER, OPTIONAL, INTENT(IN) :: do_radar_ref
   INTEGER, OPTIONAL, INTENT(IN) :: do_piggyback
   
   REAL, DIMENSION(ims:ime,kms:kme,jms:jme), INTENT(INOUT) ::  & ! G. Thompson
                 re_cloud, re_ice, re_snow
   INTEGER, INTENT(IN):: has_reqc, has_reqi, has_reqs
!  REAL , DIMENSION( ims:ime , jms:jme ), OPTIONAL, INTENT(INOUT) :: lwp

   INTEGER, INTENT(IN) :: n_moist, n_scalar  
   REAL, DIMENSION( ims:ime, kms:kme, jms:jme), OPTIONAL, INTENT(INOUT) ::  &
                  t_old,ssw,ssi
   REAL, DIMENSION( ims:ime, kms:kme, jms:jme), OPTIONAL, INTENT(INOUT) ::  &
                  t_old_pg,ssw_pg,ssi_pg				  
   REAL, DIMENSION( ims:ime, kms:kme, jms:jme, n_moist ),       &
         OPTIONAL, INTENT(INOUT ) :: moist_old, moist
   REAL, DIMENSION( ims:ime, kms:kme, jms:jme, n_scalar ),       &
         OPTIONAL, INTENT(INOUT ) :: scalar_old , scalar

   REAL, DIMENSION( ims:ime, kms:kme, jms:jme),       &
         OPTIONAL, INTENT(INOUT ) ::  DNW_ACTV,DNW_COAG,DNW_BRUP,DNI_COLL,DMW_DIFF      &  ! for mp_detailed
                                     ,DMW_MELT,DMI_DIFF,DMWI_MELT,DMWI_DIFF,DMW_RIME    &  ! for mp_detailed
                                     ,DMW_FREZ,DMG_RIME
   REAL, DIMENSION( ims:ime, kms:kme, jms:jme),       &
         OPTIONAL, INTENT(INOUT ) ::  DNW_ACTV_PG,DNW_COAG_PG,DNW_BRUP_PG,DNI_COLL_PG,DMW_DIFF_PG      &  ! for mp_detailed
                                     ,DMW_MELT_PG,DMI_DIFF_PG,DMWI_MELT_PG,DMWI_DIFF_PG,DMW_RIME_PG    &  ! for mp_detailed
                                     ,DMW_FREZ_PG,DMG_RIME_PG

! LOCAL  VAR

   INTEGER :: i,j,k,its,ite,jts,jte,ij,sz,n
   LOGICAL :: channel
   LOGICAL :: nssl_progn = .false.
   REAL    :: z0, z1, z2, w1, w2

   integer, parameter :: ntot = 50
   real :: wmin, wmax
   integer :: ierr

!---------------------------------------------------------------------
!  check for microphysics type.  We need a clean way to
!  specify these things!
!---------------------------------------------------------------------
   channel = .FALSE.
   IF ( PRESENT ( channel_switch ) ) channel = channel_switch

   if ((mp_physics .eq. 0).and.(mp_physics_pg .eq.0)) return
!   if (mp_physics_pg .eq. 0) return
   IF( specified ) THEN
     sz = spec_zone
   ELSE
     sz = 0
   ENDIF

! set this to true to print out the global max/min for W on each time step.
   IF ( .false. ) THEN
      wmax = maxval( w(ips:ipe,kps:kpe,jps:jpe) )
      wmin = minval( w(ips:ipe,kps:kpe,jps:jpe) )
#if ( defined(DM_PARALLEL)  &&   ! defined(STUBMPI) )
      wmax = wrf_dm_max_real ( wmax )
      wmin = wrf_dm_min_real ( wmin )
#endif
      WRITE( wrf_err_message , * ) 'microphysics_driver: GLOBAL w max/min = ', wmax, wmin
      CALL wrf_message ( wrf_err_message )
   ENDIF

#ifdef XEON_OPTIMIZED_WSM5
   ! the OpenMP loops are inside the scheme when running on MIC
   IF ( mp_physics .EQ. WSM5SCHEME ) THEN
       IF (channel) THEN
         its = max(ips,ids)
         ite = min(ipe,ide-1)
       ELSE
         its = max(ips,ids+sz)
         ite = min(ipe,ide-1-sz)
       ENDIF
       jts = max(jps,jds+sz)
       jte = min(jpe,jde-1-sz)

       CALL wsm5(                                              &
             TH=th                                             &
            ,Q=qv_curr                                         &
            ,QC=qc_curr                                        &
            ,QR=qr_curr                                        &
            ,QI=qi_curr                                        &
            ,QS=qs_curr                                        &
            ,DEN=rho,PII=pi_phy,P=p,DELZ=dz8w                  &
            ,DELT=dt,G=g,CPD=cp,CPV=cpv                        &
            ,RD=r_d,RV=r_v,T0C=svpt0                           &
            ,EP1=ep_1, EP2=ep_2, QMIN=epsilon                  &
            ,XLS=xls, XLV0=xlv, XLF0=xlf                       &
            ,DEN0=rhoair0, DENR=rhowater                       &
            ,CLIQ=cliq,CICE=cice,PSAT=psat                     &
            ,RAIN=rainnc ,RAINNCV=rainncv                      &
            ,SNOW=snownc ,SNOWNCV=snowncv                      &
            ,SR=sr                                             &
            ,REFL_10CM=refl_10cm                               &
            ,diagflag=diagflag                                 &
            ,do_radar_ref=do_radar_ref                         &
            ,has_reqc=has_reqc                                 &  ! for radiation +
            ,has_reqi=has_reqi                                 &
            ,has_reqs=has_reqs                                 &
            ,re_cloud=re_cloud                                 &
            ,re_ice=re_ice                                     &
            ,re_snow=re_snow                                   &  ! for radiation -  
            ,IDS=ids,IDE=ide, JDS=jds,JDE=jde, KDS=kds,KDE=kde &
            ,IMS=ims,IME=ime, JMS=jms,JME=jme, KMS=kms,KME=kme &
            ,ITS=its,ITE=ite, JTS=jts,JTE=jte, KTS=kts,KTE=kte &
            )

   ELSE
#endif

   !$OMP PARALLEL DO   &
   !$OMP PRIVATE ( ij, its, ite, jts, jte, i,j,k,n )

   DO ij = 1 , num_tiles
       IF (channel) THEN
         its = max(i_start(ij),ids)
         ite = min(i_end(ij),ide-1)
       ELSE
         its = max(i_start(ij),ids+sz)
         ite = min(i_end(ij),ide-1-sz)
       ENDIF
       jts = max(j_start(ij),jds+sz)
       jte = min(j_end(ij),jde-1-sz)

! 2009-06009 rce - zero all these for safety
       IF( PRESENT(qlsink) ) qlsink(its:ite,kts:kte,jts:jte) = 0.
       IF( PRESENT(precr ) ) precr(its:ite,kts:kte,jts:jte)  = 0.
       IF( PRESENT(preci ) ) preci(its:ite,kts:kte,jts:jte)  = 0.
       IF( PRESENT(precs ) ) precs(its:ite,kts:kte,jts:jte)  = 0.
       IF( PRESENT(precg ) ) precg(its:ite,kts:kte,jts:jte)  = 0.

!-----------
       IF( PRESENT(chem_opt) .AND. PRESENT(progn) ) THEN
       
       ! ERM: check whether to use built-in droplet nucleation or use qndrop from CHEM
       IF ( mp_physics==NSSL_2MOMCCN .or. mp_physics==NSSL_2MOM .or. mp_physics==NSSL_2MOMG ) THEN
         IF ( progn > 0 ) THEN
          IF ( .not. (chem_opt == 0 .or. chem_opt == 401) ) nssl_progn = .true.
         ELSE
           nssl_progn = .false. ! use NUCOND for droplet nucleation
         ENDIF
       ENDIF
       
       !Add pass for dust-only wrf-chem option - RAS
       IF( (chem_opt==0 .OR. chem_opt==401) .AND. progn==1 .AND. (mp_physics==LINSCHEME  .OR. mp_physics==MORR_TWO_MOMENT)) THEN
          IF( PRESENT( QNDROP_CURR ) ) THEN
             CALL wrf_debug ( 100 , 'microphysics_driver: calling prescribe_aerosol_mixactivate' )
! 06-nov-2005 rce - id  & itimestep added to arg list
             call prescribe_aerosol_mixactivate (               &
                  id, itimestep, dt, naer,                      &
                  ccn_conc, chem_opt,                           & !RAS13.1
                  rho, th, pi_phy, w, cldfra, cldfra_old,       &
                  z, dz8w, p8w, t8w, exch_h,                    &
                  qv_curr, qc_curr, qi_curr, qndrop_curr,       &
                  nsource,                                      &
                  ids,ide, jds,jde, kds,kde,                    &
                  ims,ime, jms,jme, kms,kme,                    &
                  its,ite, jts,jte, kts,kte,                    &
                  F_QC=fx_qc, F_QI=fx_qi                          )
          END IF
       ELSEIF ( (chem_opt==0 .OR. chem_opt==401) .AND. progn==1 .AND. (mp_physics==NSSL_2MOMCCN .or.      &
                 mp_physics==NSSL_2MOM .or. mp_physics==NSSL_2MOMG)) THEN
!          Do nothing here for the moment. Use activation of CCN within the NSSL_2MOM scheme instead, based on nssl_cccn namelist value.
       ELSEIF ( progn==1 .AND. mp_physics/=LINSCHEME .AND. mp_physics/=MORR_TWO_MOMENT &
                .AND. mp_physics/=NSSL_2MOM .AND. mp_physics/=NSSL_2MOMCCN .AND. mp_physics/=NSSL_2MOMG ) THEN
             call wrf_error_fatal( &
             "SETTINGS ERROR: Prognostic cloud droplet number can only be used with the mp_physics=LINSCHEME or MORRISON or NSSL_2MOM.")
       END IF
       END IF
     
     micro_select: SELECT CASE(mp_physics)

        CASE (KESSLERSCHEME)
             CALL wrf_debug ( 100 , 'microphysics_driver: calling kessler' )
             IF ( PRESENT( QV_CURR ) .AND. PRESENT( QC_CURR ) .AND.  &
                                           PRESENT( QR_CURR ) .AND.  &
                  PRESENT( RAINNC  ) .AND. PRESENT ( RAINNCV ) .AND.  &
                                           PRESENT( Z       ))  THEN
               CALL kessler(                                        &
                  T=th                                              &
                 ,QV=qv_curr                                        &
                 ,QC=qc_curr                                        &
                 ,QR=qr_curr                                        &
                 ,RHO=rho, PII=pi_phy,DT_IN=dt, Z=z, XLV=xlv, CP=cp &
                 ,EP2=ep_2,SVP1=svp1,SVP2=svp2                      &
                 ,SVP3=svp3,SVPT0=svpt0,RHOWATER=rhowater           &
                 ,DZ8W=dz8w                                         &
                 ,RAINNC=rainnc,RAINNCV=rainncv                     &
                 ,IDS=ids,IDE=ide, JDS=jds,JDE=jde, KDS=kds,KDE=kde &
                 ,IMS=ims,IME=ime, JMS=jms,JME=jme, KMS=kms,KME=kme &
                 ,ITS=its,ITE=ite, JTS=jts,JTE=jte, KTS=kts,KTE=kte &
                                                                    )
             ELSE
                CALL wrf_error_fatal ( 'arguments not present for calling kessler' )
             ENDIF

!
        CASE (THOMPSONAERO)
             CALL wrf_debug ( 100 , 'microphysics_driver: calling thompson' )
             IF ( PRESENT( QV_CURR ) .AND. PRESENT ( QC_CURR )   .AND.  &
                  PRESENT( QR_CURR ) .AND. PRESENT ( QI_CURR )   .AND.  &
                  PRESENT( QS_CURR ) .AND. PRESENT ( QG_CURR )   .AND.  &
                  PRESENT( QNR_CURR) .AND. PRESENT ( QNI_CURR)   .AND.  &
                  PRESENT( QNC_CURR) .AND. PRESENT ( QNWFA_CURR) .AND.  &
                  PRESENT( QNIFA_CURR).AND.PRESENT ( QNWFA2D)    .AND.  &
                  PRESENT( SNOWNC)   .AND. PRESENT ( SNOWNCV)    .AND.  &
                  PRESENT( GRAUPELNC).AND. PRESENT ( GRAUPELNCV) .AND.  &
                  PRESENT( RAINNC  ) .AND. PRESENT ( RAINNCV ) ) THEN
#if ( WRF_CHEM == 1 )
                 qv_b4mp(its:ite,kts:kte,jts:jte) = qv_curr(its:ite,kts:kte,jts:jte)
                 qc_b4mp(its:ite,kts:kte,jts:jte) = qc_curr(its:ite,kts:kte,jts:jte)
                 qi_b4mp(its:ite,kts:kte,jts:jte) = qi_curr(its:ite,kts:kte,jts:jte)
                 qs_b4mp(its:ite,kts:kte,jts:jte) = qs_curr(its:ite,kts:kte,jts:jte)
#endif
             CALL mp_gt_driver(                          &
                     QV=qv_curr,                         &
                     QC=qc_curr,                         &
                     QR=qr_curr,                         &
                     QI=qi_curr,                         &
                     QS=qs_curr,                         &
                     QG=qg_curr,                         &
                     NI=qni_curr,                        &
                     NR=qnr_curr,                        &
                     NC=qnc_curr,                        &
                     NWFA=qnwfa_curr,                    &
                     NIFA=qnifa_curr,                    &
                     NWFA2D=qnwfa2d,                     &
                     TH=th,                              &
                     PII=pi_phy,                         &
                     P=p,                                &
                     W=w,                                &
                     DZ=dz8w,                            &
                     DT_IN=dt,                           &
                     ITIMESTEP=itimestep,                &
                     RAINNC=RAINNC,                      &
                     RAINNCV=RAINNCV,                    &
                     SNOWNC=SNOWNC,                      &
                     SNOWNCV=SNOWNCV,                    &
                     GRAUPELNC=GRAUPELNC,                &
                     GRAUPELNCV=GRAUPELNCV,              &
                     SR=SR,                              &
#if ( WRF_CHEM == 1 )
                     RAINPROD=rainprod,                  &
                     EVAPPROD=evapprod,                  &
#endif
                     REFL_10CM=refl_10cm,                &
                     diagflag=diagflag,                  &
                     do_radar_ref=do_radar_ref,          &
                     re_cloud=re_cloud,                  &
                     re_ice=re_ice,                      &
                     re_snow=re_snow,                    &
                     has_reqc=has_reqc,                  & ! G. Thompson
                     has_reqi=has_reqi,                  & ! G. Thompson
                     has_reqs=has_reqs,                  & ! G. Thompson
                 IDS=ids,IDE=ide, JDS=jds,JDE=jde, KDS=kds,KDE=kde, &
                 IMS=ims,IME=ime, JMS=jms,JME=jme, KMS=kms,KME=kme, &
                 ITS=its,ITE=ite, JTS=jts,JTE=jte, KTS=kts,KTE=kte)
             ELSE
                CALL wrf_error_fatal ( 'arguments not present for calling thompson_et_al' )
             ENDIF

        CASE (THOMPSON)
             CALL wrf_debug ( 100 , 'microphysics_driver: calling thompson' )
             IF ( PRESENT( QV_CURR ) .AND. PRESENT ( QC_CURR ) .AND.  &
                  PRESENT( QR_CURR ) .AND. PRESENT ( QI_CURR ) .AND.  &
                  PRESENT( QS_CURR ) .AND. PRESENT ( QG_CURR ) .AND.  &
                  PRESENT( QNR_CURR) .AND. PRESENT ( QNI_CURR) .AND.  &
!                  PRESENT( SNOWNC) .AND. PRESENT ( SNOWNCV) .AND.        &
!                  PRESENT( GRAUPELNC) .AND. PRESENT ( GRAUPELNCV) .AND.  &
                  PRESENT( RAINNC  ) .AND. PRESENT ( RAINNCV ) ) THEN
#if ( WRF_CHEM == 1 )
                 qv_b4mp(its:ite,kts:kte,jts:jte) = qv_curr(its:ite,kts:kte,jts:jte)
                 qc_b4mp(its:ite,kts:kte,jts:jte) = qc_curr(its:ite,kts:kte,jts:jte)
                 qi_b4mp(its:ite,kts:kte,jts:jte) = qi_curr(its:ite,kts:kte,jts:jte)
                 qs_b4mp(its:ite,kts:kte,jts:jte) = qs_curr(its:ite,kts:kte,jts:jte)
#endif
             CALL mp_gt_driver(                          &
                     QV=qv_curr,                         &
                     QC=qc_curr,                         &
                     QR=qr_curr,                         &
                     QI=qi_curr,                         &
                     QS=qs_curr,                         &
                     QG=qg_curr,                         &
                     NI=qni_curr,                        &
                     NR=qnr_curr,                        &
                     TH=th,                              &
                     PII=pi_phy,                         &
                     P=p,                                &
                     W=w,                                &
                     DZ=dz8w,                            &
                     DT_IN=dt,                           &
                     ITIMESTEP=itimestep,                &
                     RAINNC=RAINNC,                      &
                     RAINNCV=RAINNCV,                    &
                     SNOWNC=SNOWNC,                      &
                     SNOWNCV=SNOWNCV,                    &
                     GRAUPELNC=GRAUPELNC,                &
                     GRAUPELNCV=GRAUPELNCV,              &
                     SR=SR,                              &
#if ( WRF_CHEM == 1 )
                     RAINPROD=rainprod,                  &
                     EVAPPROD=evapprod,                  &
#endif
                     REFL_10CM=refl_10cm,                &
                     diagflag=diagflag,                  &
                     do_radar_ref=do_radar_ref,          &
                     re_cloud=re_cloud,                  & ! G. Thompson
                     re_ice=re_ice,                      & ! G. Thompson
                     re_snow=re_snow,                    & ! G. Thompson
                     has_reqc=has_reqc,                  & ! G. Thompson
                     has_reqi=has_reqi,                  & ! G. Thompson
                     has_reqs=has_reqs,                  & ! G. Thompson
                 IDS=ids,IDE=ide, JDS=jds,JDE=jde, KDS=kds,KDE=kde, &
                 IMS=ims,IME=ime, JMS=jms,JME=jme, KMS=kms,KME=kme, &
                 ITS=its,ITE=ite, JTS=jts,JTE=jte, KTS=kts,KTE=kte)
             ELSE
                CALL wrf_error_fatal ( 'arguments not present for calling thompson_et_al' )
             ENDIF

        CASE (DETAILED)
             CALL wrf_debug ( 100 , 'microphysics_driver: calling geresdi detailed/bin model' )
             CALL mp_gi_driver(                          &
                     itimestep,th,pi_phy,p,dt,dz8w,rho,  &
                     t_old,dx,dy,                        &
                     moist_old, moist,                   &
                     scalar_old, scalar,                 &
                     n_moist, n_scalar,ssw,ssi,          &
                     DNW_ACTV,DNW_COAG,DNW_BRUP,DNI_COLL,&
                     DMW_DIFF,DMW_MELT,DMI_DIFF,DMWI_MELT,&
                     DMWI_DIFF,DMW_RIME,DMW_FREZ,DMG_RIME,&
                     RAINNC, RAINNCV,                    &
                     snownc, snowncv,                    &
                     graupelnc, graupelncv,              &
                     sr,refl_10cm, diagflag,do_radar_ref,&
                     ids,ide, jds,jde, kds,kde,          &
                     ims,ime, jms,jme, kms,kme,          &
                     its,ite, jts,jte, kts,kte)

#if (EM_CORE==1)
       CASE (FAST_KHAIN_LYNN)
             CALL wrf_debug ( 100 , 'microphysics_driver: calling sbm' )
               CALL fast_sbm(W=w,U=u,V=v,TH_OLD=th_old          &
                 ,CHEM_new=scalar,N_CHEM=num_scalar_x                     &
                 ,ITIMESTEP=itimestep,DT=dt,DX=dx,DY=dy             &
                 ,DZ8W=dz8w,RHO_PHY=rho,P_PHY=p,PI_PHY=pi_phy,TH_PHY=th &
                 ,xland=xland                                       &
                 ,ivgtyp=ivgtyp                                      &
                 ,xlat=xlat                                        &
                 ,xlong=xlong                                        &
                 ,QV=qv_curr                                        &
                 ,QC=qc_curr                                        &
                 ,QR=qr_curr                                        &
                 ,QI=qi_curr                                        &
                 ,QS=qs_curr                                        &
                 ,QG=qg_curr                                        &
                 ,QV_OLD=qv_old                                     &
                 ,QNC=qnc_curr                                      &
                 ,QNR=qnr_curr                                      &
                 ,QNS=qns_curr                                      &
                 ,QNG=qng_curr                                      &
                 ,QNA=qnn_curr                                      &
                 ,IDS=ids,IDE=ide, JDS=jds,JDE=jde, KDS=kds,KDE=kde &
                 ,IMS=ims,IME=ime, JMS=jms,JME=jme, KMS=kms,KME=kme &
                 ,ITS=its,ITE=ite, JTS=jts,JTE=jte, KTS=kts,KTE=kte &
                 ,REFL_10CM=refl_10cm                 &  ! added for radar reflectivity
                 ,diagflag=diagflag                   &  ! added for radar reflectivity
                 ,do_radar_ref=do_radar_ref           &  ! added for radar reflectivity
                 ,RAINNC=rainnc)

!
       CASE (FULL_KHAIN_LYNN)
             CALL wrf_debug ( 100 , 'microphysics_driver: calling sbm' )
               CALL sbm(W=w,U=u,V=v,TH_OLD=th_old          &
                 ,CHEM_new=scalar,N_CHEM=num_scalar_x                     &
                 ,ITIMESTEP=itimestep,DT=dt,DX=dx,DY=dy             &
                 ,DZ8W=dz8w,RHO_PHY=rho,P_PHY=p,PI_PHY=pi_phy,TH_PHY=th &
                 ,xland=xland                                       &
                 ,ivgtyp=ivgtyp                                      &
                 ,xlat=xlat                                        &
                 ,xlong=xlong                                        &
                 ,QV=qv_curr                                        &
                 ,QC=qc_curr                                        &
                 ,QR=qr_curr                                        &
                 ,QIP=qip_curr                                        &
                 ,QIC=qic_curr                                        &
                 ,QID=qid_curr                                        &
                 ,QS=qs_curr                                        &
                 ,QG=qg_curr                                        &
                 ,QH=qh_curr                                        &
                 ,QV_OLD=qv_old                                     &
                 ,QNC=qnc_curr                                      &
                 ,QNR=qnr_curr                                      &
                 ,QNIP=qnip_curr                                      &
                 ,QNIC=qnic_curr                                      &
                 ,QNID=qnid_curr                                      &
                 ,QNS=qns_curr                                      &
                 ,QNG=qng_curr                                      &
                 ,QNH=qng_curr                                      &
                 ,QNA=qnn_curr                                      &
                 ,EFFR=effr_curr                                  &
                 ,ICE_EFFR=ice_effr_curr                                  &
                 ,TOT_EFFR=tot_effr_curr                                  &
                 ,QIC_EFFR=qic_effr_curr                                  &
                 ,QIP_EFFR=qip_effr_curr                                  &
                 ,QID_EFFR=qid_effr_curr                                  &
                 ,height=height                                        &
                 ,tempc=tempc                                         &
                 ,kext_ql=kext_ql                                       &
                 ,kext_qs=kext_qs                                       &
                 ,kext_qg=kext_qg                                       &
                 ,kext_qh=kext_qh                                       &
                 ,kext_qa=kext_qa                                       &
                 ,kext_qic=kext_qic                                       &
                 ,kext_qip=kext_qip                                       &
                 ,kext_qid=kext_qid                                       &
                 ,kext_ft_qic=kext_ft_qic                                       &
                 ,kext_ft_qip=kext_ft_qip                                       &
                 ,kext_ft_qid=kext_ft_qid                                       &
                 ,kext_ft_qs=kext_ft_qs                                       &
                 ,kext_ft_qg=kext_ft_qg                                       &
                 ,IDS=ids,IDE=ide, JDS=jds,JDE=jde, KDS=kds,KDE=kde &
                 ,IMS=ims,IME=ime, JMS=jms,JME=jme, KMS=kms,KME=kme &
                 ,ITS=its,ITE=ite, JTS=jts,JTE=jte, KTS=kts,KTE=kte &
                 ,REFL_10CM=refl_10cm                 &  ! added for radar reflectivity
                 ,diagflag=diagflag                   &  ! added for radar reflectivity
                 ,do_radar_ref=do_radar_ref           &  ! added for radar reflectivity
                 ,RAINNC=rainnc)
#endif

!
    CASE (MORR_TWO_MOMENT)

         CALL wrf_debug(100, 'microphysics_driver: calling morrison two moment')
         IF (PRESENT (QV_CURR) .AND. PRESENT (QC_CURR) .AND. &
             PRESENT (QR_CURR) .AND. PRESENT (QI_CURR) .AND. &
         PRESENT (QS_CURR) .AND. PRESENT (QG_CURR) .AND. &
         PRESENT (QR_CURR) .AND. PRESENT (QI_CURR) .AND. &
         PRESENT (QNS_CURR) .AND. PRESENT (QNI_CURR).AND. &
         PRESENT (QNR_CURR) .AND. PRESENT (QNG_CURR).AND. &
         PRESENT (MU) .AND. PRESENT (QSCUTEN).AND. &
         PRESENT (QRCUTEN) .AND. PRESENT (QICUTEN).AND. &
         PRESENT (RAINNC ) .AND. PRESENT (RAINNCV) .AND. &
         PRESENT (Z      ) .AND.PRESENT ( W      )  ) THEN
         CALL mp_morr_two_moment_driver(                            &
                     ITIMESTEP=itimestep,                &  !*
                     TH=th,                              &  !*
                     QV=qv_curr,                         &  !*
                     QC=qc_curr,                         &  !*
                     QR=qr_curr,                         &  !*
                     QI=qi_curr,                         &  !*
                     QS=qs_curr,                         &  !*
                     QG=qg_curr,                         &  !*
                     NI=qni_curr,                        &  !*
                     NS=qns_curr,                        &  !* ! VVT
                     NR=qnr_curr,                        &  !* ! VVT
                     NG=qng_curr,                        &  !* ! VVT
                     RHO=rho,                            &  !*
                     PII=pi_phy,                         &  !*
                     P=p,                                &  !*
                     DT_IN=dt,                           &  !*
                     DZ=dz8w,                            &  !* !hm
                     HT=ht,                              &  !*
                     W=w                                 &  !*
                    ,RAINNC=RAINNC                       &  !*
                    ,RAINNCV=RAINNCV                     &  !*
                    ,SNOWNC=SNOWNC                       &  !*
                    ,SNOWNCV=SNOWNCV                     &  !*
                    ,GRAUPELNC=GRAUPELNC                 &  !*
                    ,GRAUPELNCV=GRAUPELNCV               &  !*
                    ,SR=SR                               &  !* !hm
                    ,REFL_10CM=refl_10cm                 &  ! added for radar reflectivity
                    ,diagflag=diagflag                   &  ! added for radar reflectivity
                    ,do_radar_ref=do_radar_ref           &  ! added for radar reflectivity
                    ,qrcuten=qrcuten                     &  ! hm
                    ,qscuten=qscuten                     &  ! hm
                    ,qicuten=qicuten                     &  ! hm
                    ,mu=mu                          &  ! hm
                    ,F_QNDROP=fx_qndrop                   &  ! hm for wrf-chem
                 ,QNDROP=qndrop_curr                     &  ! hm for wrf-chem
                 ,IDS=ids,IDE=ide, JDS=jds,JDE=jde, KDS=kds,KDE=kde &
                 ,IMS=ims,IME=ime, JMS=jms,JME=jme, KMS=kms,KME=kme &
                 ,ITS=its,ITE=ite, JTS=jts,JTE=jte, KTS=kts,KTE=kte &
                 ,QLSINK=qlsink                                     & ! jdf for wrf-chem
#if ( WRF_CHEM == 1 )
                 ,EVAPPROD=evapprod,RAINPROD=rainprod               &
#endif
                 ,PRECR=precr,PRECI=preci,PRECS=precs,PRECG=precg   & ! jdf for wrf-chem
                                                                    )
        ELSE
           Call wrf_error_fatal( 'arguments not present for calling morrison two moment')
        ENDIF


    CASE (MILBRANDT2MOM)
         CALL wrf_debug(100, 'microphysics_driver: calling milbrandt2mom')
         IF (PRESENT (QV_CURR) .AND.                           &
             PRESENT (QC_CURR) .AND. PRESENT (QNC_CURR)  .AND. &
             PRESENT (QR_CURR) .AND. PRESENT (QNR_CURR)  .AND. &
             PRESENT (QI_CURR) .AND. PRESENT (QNI_CURR)  .AND. &
             PRESENT (QS_CURR) .AND. PRESENT (QNS_CURR)  .AND. &
             PRESENT (QG_CURR) .AND. PRESENT (QNG_CURR)  .AND. &
             PRESENT (QH_CURR) .AND. PRESENT (QNH_CURR)  .AND. &
             PRESENT (RAINNC ) .AND. PRESENT (RAINNCV)   .AND. &
             PRESENT (SNOWNC ) .AND. PRESENT (SNOWNCV)   .AND. &
             PRESENT (HAILNC ) .AND. PRESENT (HAILNCV)   .AND. &
             PRESENT (GRAUPELNC).AND.PRESENT (GRAUPELNCV).AND. &
             PRESENT (Z      ) .AND. PRESENT ( W      )  ) THEN
!            PRESENT (ccntype)                                 &

         CALL mp_milbrandt2mom_driver(                   &
                     ITIMESTEP=itimestep,                &
                     p8w=p8w,                              &
                     TH=th,                              &
                     QV=qv_curr,                         &
                     QC=qc_curr,                         &
                     QR=qr_curr,                         &
                     QI=qi_curr,                         &
                     QS=qs_curr,                         &
                     QG=qg_curr,                         &
                     QH=qh_curr,                         &
                     NC=qnc_curr,                        &
                     NR=qnr_curr,                        &
                     NI=qni_curr,                        &
                     NS=qns_curr,                        &
                     NG=qng_curr,                        &
                     NH=qnh_curr,                        &
                     PII=pi_phy,                         &
                     P=p,                                &
                     DT_IN=dt,                           &
                     DZ=dz8w,                            &
                     W=w,                                &
                     RAINNC   = RAINNC,                  &
                     RAINNCV  = RAINNCV,                 &
                     SNOWNC   = SNOWNC,                  &
                     SNOWNCV  = SNOWNCV,                 &
                     HAILNC   = HAILNC,                  &
                     HAILNCV  = HAILNCV,                 &
                     GRPLNC   = GRAUPELNC,               &
                     GRPLNCV  = GRAUPELNCV,              &
                     SR=SR,                              &
!                    ccntype  = ccntype,                 &
                     Zet      = refl_10cm,               & ! HM, 9/22/09 for refl
                  IDS=ids,IDE=ide, JDS=jds,JDE=jde, KDS=kds,KDE=kde, &
                  IMS=ims,IME=ime, JMS=jms,JME=jme, KMS=kms,KME=kme, &
                  ITS=its,ITE=ite, JTS=jts,JTE=jte, KTS=kts,KTE=kte  &
                                                                    )
        ELSE
           Call wrf_error_fatal( 'arguments not present for calling milbrandt2mom')
        ENDIF


!     CASE (MILBRANDT3MOM)
!          CALL wrf_debug(100, 'microphysics_driver: calling milbrandt3mom')
!          IF (PRESENT (QV_CURR) .AND.                          &
!              PRESENT (QC_CURR) .AND. PRESENT (QNC_CURR) .AND. &
!              PRESENT (QR_CURR) .AND. PRESENT (QNR_CURR) .AND. PRESENT (QZR_CURR) .AND.  &
!              PRESENT (QI_CURR) .AND. PRESENT (QNI_CURR) .AND. PRESENT (QZI_CURR) .AND.  &
!              PRESENT (QS_CURR) .AND. PRESENT (QNS_CURR) .AND. PRESENT (QZS_CURR) .AND.  &
!              PRESENT (QG_CURR) .AND. PRESENT (QNG_CURR) .AND. PRESENT (QZG_CURR) .AND.  &
!              PRESENT (QH_CURR) .AND. PRESENT (QNH_CURR) .AND. PRESENT (QZH_CURR) .AND.  &
!              PRESENT (RAINNC ) .AND. PRESENT (RAINNCV)  .AND. &
!              PRESENT (Z      ) .AND. PRESENT ( W      )  ) THEN
!          CALL mp_milbrandt3mom_driver(                   &
!                      ITIMESTEP=itimestep,                &  !*
!                      TH=th,                              &  !*
!                      QV=qv_curr,                         &  !*
!                      QC=qc_curr,                         &  !*
!                      QR=qr_curr,                         &  !*
!                      QI=qi_curr,                         &  !*
!                      QS=qs_curr,                         &  !*
!                      QG=qg_curr,                         &  !*
!                      QH=qh_curr,                         &  !*
!                      NC=qnc_curr,                        &  !*
!                      NR=qnr_curr,                        &  !*
!                      NI=qni_curr,                        &  !*
!                      NS=qns_curr,                        &  !*
!                      NG=qng_curr,                        &  !*
!                      NH=qnh_curr,                        &  !*
!                      ZR=qzr_curr,                        &  !*
!                      ZI=qzi_curr,                        &  !*
!                      ZS=qzs_curr,                        &  !*
!                      ZG=qzg_curr,                        &  !*
!                      ZH=qzh_curr,                        &  !*
!                      PII=pi_phy,                         &  !*
!                      P=p,                                &  !*
!                      DT_IN=dt,                           &  !*
!                      DZ=dz8w,                            &  !* ! h
!                      W=w                                 &  !*
!                     ,RAINNC=RAINNC                       &  !*
!                     ,RAINNCV=RAINNCV                     &  !*
!                     ,SR=SR                               &  !* !hm
!                  ,IDS=ids,IDE=ide, JDS=jds,JDE=jde, KDS=kds,KDE=kde &
!                  ,IMS=ims,IME=ime, JMS=jms,JME=jme, KMS=kms,KME=kme &
!                  ,ITS=its,ITE=ite, JTS=jts,JTE=jte, KTS=kts,KTE=kte &
!                                                                     )
!         ELSE
!            Call wrf_error_fatal( 'arguments not present for calling milbrandt3mom')
!         ENDIF

#if (EM_CORE==1)
    CASE (NSSL_1MOM)
         CALL wrf_debug(100, 'microphysics_driver: calling nssl1mom')
         IF (PRESENT (QV_CURR) .AND.                           &
             PRESENT (QC_CURR) .AND.  &
             PRESENT (QR_CURR) .AND.  &
             PRESENT (QI_CURR) .AND.  &
             PRESENT (QS_CURR) .AND.  &
             PRESENT (QG_CURR) .AND.  &
             PRESENT (QH_CURR) .AND.  &
             PRESENT (RAINNC ) .AND. PRESENT (RAINNCV)   .AND. &
             PRESENT (SNOWNC ) .AND. PRESENT (SNOWNCV)   .AND. &
             PRESENT (HAILNC ) .AND. PRESENT (HAILNCV)   .AND. &
             PRESENT (GRAUPELNC).AND.PRESENT (GRAUPELNCV).AND. &
             PRESENT (Z      ) .AND. PRESENT ( W      )  .AND. &
             PRESENT (QVOLG_CURR) ) THEN
             

         CALL nssl_2mom_driver(                          &
                     ITIMESTEP=itimestep,                &
                     TH=th,                              &
                     QV=qv_curr,                         &
                     QC=qc_curr,                         &
                     QR=qr_curr,                         &
                     QI=qi_curr,                         &
                     QS=qs_curr,                         &
                     QH=qg_curr,                         &
                     QHL=qh_curr,                        &
                     CCW=qnc_curr,                       &
                     CRW=qnr_curr,                       &
                     CCI=qni_curr,                       &
                     CSW=qns_curr,                       &
                     CHW=qng_curr,                       &
                     CHL=qnh_curr,                       &
                     VHW=qvolg_curr,                     &
                     PII=pi_phy,                         &
                     P=p,                                &
                     W=w,                                &
                     DZ=dz8w,                            &
                     DTP=dt,                             &
                     DN=rho,                             &
                     RAINNC   = RAINNC,                  &
                     RAINNCV  = RAINNCV,                 &
                     SNOWNC   = SNOWNC,                  &
                     SNOWNCV  = SNOWNCV,                 &
                     HAILNC   = HAILNC,                  &
                     HAILNCV  = HAILNCV,                 &
                     GRPLNC   = GRAUPELNC,               &
                     GRPLNCV  = GRAUPELNCV,              &
                     SR=SR,                              &
                     dbz      = refl_10cm,               &
                     diagflag = diagflag,                &
                  IDS=ids,IDE=ide, JDS=jds,JDE=jde, KDS=kds,KDE=kde, &
                  IMS=ims,IME=ime, JMS=jms,JME=jme, KMS=kms,KME=kme, &
                  ITS=its,ITE=ite, JTS=jts,JTE=jte, KTS=kts,KTE=kte  &
                                                                    )
        ELSE
           Call wrf_error_fatal( 'arguments not present for calling nssl_2mom')
        ENDIF


    CASE (NSSL_1MOMLFO)
         CALL wrf_debug(100, 'microphysics_driver: calling nssl1mom')
         IF (PRESENT (QV_CURR) .AND.                           &
             PRESENT (QC_CURR) .AND.  &
             PRESENT (QR_CURR) .AND.  &
             PRESENT (QI_CURR) .AND.  &
             PRESENT (QS_CURR) .AND.  &
             PRESENT (QG_CURR) .AND.  &
             PRESENT (RAINNC ) .AND. PRESENT (RAINNCV)   .AND. &
             PRESENT (SNOWNC ) .AND. PRESENT (SNOWNCV)   .AND. &
             PRESENT (GRAUPELNC).AND.PRESENT (GRAUPELNCV).AND. &
             PRESENT (Z      ) .AND. PRESENT ( W      )  ) THEN
             

         CALL nssl_2mom_driver(                          &
                     ITIMESTEP=itimestep,                &
                     TH=th,                              &
                     QV=qv_curr,                         &
                     QC=qc_curr,                         &
                     QR=qr_curr,                         &
                     QI=qi_curr,                         &
                     QS=qs_curr,                         &
                     QH=qg_curr,                         &
                     PII=pi_phy,                         &
                     P=p,                                &
                     W=w,                                &
                     DZ=dz8w,                            &
                     DTP=dt,                             &
                     DN=rho,                             &
                     RAINNC   = RAINNC,                  &
                     RAINNCV  = RAINNCV,                 &
                     SNOWNC   = SNOWNC,                  &
                     SNOWNCV  = SNOWNCV,                 &
                     GRPLNC   = GRAUPELNC,               &
                     GRPLNCV  = GRAUPELNCV,              &
                     SR=SR,                              &
                     dbz      = refl_10cm,               &
                     diagflag = diagflag,                &
                  IDS=ids,IDE=ide, JDS=jds,JDE=jde, KDS=kds,KDE=kde, &
                  IMS=ims,IME=ime, JMS=jms,JME=jme, KMS=kms,KME=kme, &
                  ITS=its,ITE=ite, JTS=jts,JTE=jte, KTS=kts,KTE=kte  &
                                                                    )
        ELSE
           Call wrf_error_fatal( 'arguments not present for calling nssl_2mom')
        ENDIF

    CASE (NSSL_2MOM)
         CALL wrf_debug(100, 'microphysics_driver: calling nssl2mom')
         IF (PRESENT (QV_CURR) .AND.                           &
             PRESENT (QC_CURR) .AND. PRESENT (QNdrop_CURR)  .AND. &
             PRESENT (QR_CURR) .AND. PRESENT (QNR_CURR)  .AND. &
             PRESENT (QI_CURR) .AND. PRESENT (QNI_CURR)  .AND. &
             PRESENT (QS_CURR) .AND. PRESENT (QNS_CURR)  .AND. &
             PRESENT (QG_CURR) .AND. PRESENT (QNG_CURR)  .AND. &
             PRESENT (QH_CURR) .AND. PRESENT (QNH_CURR)  .AND. &
             PRESENT (RAINNC ) .AND. PRESENT (RAINNCV)   .AND. &
             PRESENT (SNOWNC ) .AND. PRESENT (SNOWNCV)   .AND. &
             PRESENT (HAILNC ) .AND. PRESENT (HAILNCV)   .AND. &
             PRESENT (GRAUPELNC).AND.PRESENT (GRAUPELNCV).AND. &
             PRESENT (Z      ) .AND. PRESENT ( W      )  .AND. &
             PRESENT (QVOLG_CURR) .AND. FX_QVOLG  .AND.         &
             PRESENT (QVOLH_CURR) .AND. FX_QVOLH ) THEN
             

         CALL nssl_2mom_driver(                          &
                     ITIMESTEP=itimestep,                &
                     TH=th,                              &
                     QV=qv_curr,                         &
                     QC=qc_curr,                         &
                     QR=qr_curr,                         &
                     QI=qi_curr,                         &
                     QS=qs_curr,                         &
                     QH=qg_curr,                         &
                     QHL=qh_curr,                        &
 !                    CCW=qnc_curr,                       &
                     CCW=qndrop_curr,                    &
                     CRW=qnr_curr,                       &
                     CCI=qni_curr,                       &
                     CSW=qns_curr,                       &
                     CHW=qng_curr,                       &
                     CHL=qnh_curr,                       &
                     VHW=qvolg_curr,                     &
                     VHL=qvolh_curr,                     &
                     PII=pi_phy,                         &
                     P=p,                                &
                     W=w,                                &
                     DZ=dz8w,                            &
                     DTP=dt,                             &
                     DN=rho,                             &
                     RAINNC   = RAINNC,                  &
                     RAINNCV  = RAINNCV,                 &
                     SNOWNC   = SNOWNC,                  &
                     SNOWNCV  = SNOWNCV,                 &
                     HAILNC   = HAILNC,                  &
                     HAILNCV  = HAILNCV,                 &
                     GRPLNC   = GRAUPELNC,               &
                     GRPLNCV  = GRAUPELNCV,              &
                     SR=SR,                              &
                     dbz      = refl_10cm,               &
#if ( WRF_CHEM == 1 )
                    EVAPPROD=evapprod,RAINPROD=rainprod, &
#endif
                     nssl_progn=nssl_progn,              &
                     diagflag = diagflag,                &
                     re_cloud=re_cloud,                  &
                     re_ice=re_ice,                      &
                     re_snow=re_snow,                    &
                     has_reqc=has_reqc,                  & ! ala G. Thompson
                     has_reqi=has_reqi,                  & ! ala G. Thompson
                     has_reqs=has_reqs,                  & ! ala G. Thompson
                  IDS=ids,IDE=ide, JDS=jds,JDE=jde, KDS=kds,KDE=kde, &
                  IMS=ims,IME=ime, JMS=jms,JME=jme, KMS=kms,KME=kme, &
                  ITS=its,ITE=ite, JTS=jts,JTE=jte, KTS=kts,KTE=kte  &
                                                                    )

        ELSE
           Call wrf_error_fatal( 'arguments not present for calling nssl_2mom')
        ENDIF

    CASE (NSSL_2MOMG)
         CALL wrf_debug(100, 'microphysics_driver: calling nssl2mom')
         IF (PRESENT (QV_CURR) .AND.                           &
             PRESENT (QC_CURR) .AND. PRESENT (QNdrop_CURR)  .AND. &
             PRESENT (QR_CURR) .AND. PRESENT (QNR_CURR)  .AND. &
             PRESENT (QI_CURR) .AND. PRESENT (QNI_CURR)  .AND. &
             PRESENT (QS_CURR) .AND. PRESENT (QNS_CURR)  .AND. &
             PRESENT (QG_CURR) .AND. PRESENT (QNG_CURR)  .AND. &
             PRESENT (RAINNC ) .AND. PRESENT (RAINNCV)   .AND. &
             PRESENT (SNOWNC ) .AND. PRESENT (SNOWNCV)   .AND. &
             PRESENT (HAILNC ) .AND. PRESENT (HAILNCV)   .AND. &
             PRESENT (GRAUPELNC).AND.PRESENT (GRAUPELNCV).AND. &
             PRESENT (Z      ) .AND. PRESENT ( W      )  .AND. &
             PRESENT (QVOLG_CURR) .AND. FX_QVOLG  ) THEN
             

         CALL nssl_2mom_driver(                          &
                     ITIMESTEP=itimestep,                &
                     TH=th,                              &
                     QV=qv_curr,                         &
                     QC=qc_curr,                         &
                     QR=qr_curr,                         &
                     QI=qi_curr,                         &
                     QS=qs_curr,                         &
                     QH=qg_curr,                         &
 !                    CCW=qnc_curr,                       &
                     CCW=qndrop_curr,                    &
                     CRW=qnr_curr,                       &
                     CCI=qni_curr,                       &
                     CSW=qns_curr,                       &
                     CHW=qng_curr,                       &
                     VHW=qvolg_curr,                     &
                     PII=pi_phy,                         &
                     P=p,                                &
                     W=w,                                &
                     DZ=dz8w,                            &
                     DTP=dt,                             &
                     DN=rho,                             &
                     RAINNC   = RAINNC,                  &
                     RAINNCV  = RAINNCV,                 &
                     SNOWNC   = SNOWNC,                  &
                     SNOWNCV  = SNOWNCV,                 &
                     HAILNC   = HAILNC,                  &
                     HAILNCV  = HAILNCV,                 &
                     GRPLNC   = GRAUPELNC,               &
                     GRPLNCV  = GRAUPELNCV,              &
                     SR=SR,                              &
                     dbz      = refl_10cm,               &
#if ( WRF_CHEM == 1 )
                    EVAPPROD=evapprod,RAINPROD=rainprod, &
#endif
                     nssl_progn=nssl_progn,              &
                      diagflag = diagflag,               &
                     re_cloud=re_cloud,                  &
                     re_ice=re_ice,                      &
                     re_snow=re_snow,                    &
                     has_reqc=has_reqc,                  & ! ala G. Thompson
                     has_reqi=has_reqi,                  & ! ala G. Thompson
                     has_reqs=has_reqs,                  & ! ala G. Thompson
                  IDS=ids,IDE=ide, JDS=jds,JDE=jde, KDS=kds,KDE=kde, &
                  IMS=ims,IME=ime, JMS=jms,JME=jme, KMS=kms,KME=kme, &
                  ITS=its,ITE=ite, JTS=jts,JTE=jte, KTS=kts,KTE=kte  &
                                                                    )

        ELSE
           Call wrf_error_fatal( 'arguments not present for calling nssl_2mom')
        ENDIF

    CASE (NSSL_2MOMCCN)
         CALL wrf_debug(100, 'microphysics_driver: calling nssl_2momccn')
         IF (PRESENT (QV_CURR) .AND.                           &
             PRESENT (QC_CURR) .AND. PRESENT (QNDROP_CURR)  .AND. &
             PRESENT (QR_CURR) .AND. PRESENT (QNR_CURR)  .AND. &
             PRESENT (QI_CURR) .AND. PRESENT (QNI_CURR)  .AND. &
             PRESENT (QS_CURR) .AND. PRESENT (QNS_CURR)  .AND. &
             PRESENT (QG_CURR) .AND. PRESENT (QNG_CURR)  .AND. &
             PRESENT (QH_CURR) .AND. PRESENT (QNH_CURR)  .AND. &
             PRESENT (RAINNC ) .AND. PRESENT (RAINNCV)   .AND. &
             PRESENT (SNOWNC ) .AND. PRESENT (SNOWNCV)   .AND. &
             PRESENT (HAILNC ) .AND. PRESENT (HAILNCV)   .AND. &
             PRESENT (GRAUPELNC).AND.PRESENT (GRAUPELNCV).AND. &
             PRESENT (Z      ) .AND. PRESENT ( W      )  .AND. &
             PRESENT (QVOLG_CURR) .AND. FX_QVOLG  .AND.         &
             PRESENT (QVOLH_CURR) .AND. FX_QVOLH  .AND.         &
             PRESENT( QNN_CURR )                          ) THEN
             

         CALL nssl_2mom_driver(                          &
                     ITIMESTEP=itimestep,                &
                     TH=th,                              &
                     QV=qv_curr,                         &
                     QC=qc_curr,                         &
                     QR=qr_curr,                         &
                     QI=qi_curr,                         &
                     QS=qs_curr,                         &
                     QH=qg_curr,                         &
                     QHL=qh_curr,                        &
!                     CCW=qnc_curr,                       &
                     CCW=qndrop_curr,                    &
                     CRW=qnr_curr,                       &
                     CCI=qni_curr,                       &
                     CSW=qns_curr,                       &
                     CHW=qng_curr,                       &
                     CHL=qnh_curr,                       &
                     VHW=qvolg_curr,                     &
                     VHL=qvolh_curr,                     &
                     cn=qnn_curr,                        &
                     PII=pi_phy,                         &
                     P=p,                                &
                     W=w,                                &
                     DZ=dz8w,                            &
                     DTP=dt,                             &
                     DN=rho,                             &
                     RAINNC   = RAINNC,                  &
                     RAINNCV  = RAINNCV,                 &
                     SNOWNC   = SNOWNC,                  &
                     SNOWNCV  = SNOWNCV,                 &
                     HAILNC   = HAILNC,                  &
                     HAILNCV  = HAILNCV,                 &
                     GRPLNC   = GRAUPELNC,               &
                     GRPLNCV  = GRAUPELNCV,              &
                     SR=SR,                              &
                     dbz      = refl_10cm,               &
#if ( WRF_CHEM == 1 )
                     EVAPPROD=evapprod,RAINPROD=rainprod,&
#endif
                     nssl_progn=nssl_progn,              &
                     diagflag = diagflag,                &
                     re_cloud=re_cloud,                  &
                     re_ice=re_ice,                      &
                     re_snow=re_snow,                    &
                     has_reqc=has_reqc,                  & ! ala G. Thompson
                     has_reqi=has_reqi,                  & ! ala G. Thompson
                     has_reqs=has_reqs,                  & ! ala G. Thompson
                  IDS=ids,IDE=ide, JDS=jds,JDE=jde, KDS=kds,KDE=kde, &
                  IMS=ims,IME=ime, JMS=jms,JME=jme, KMS=kms,KME=kme, &
                  ITS=its,ITE=ite, JTS=jts,JTE=jte, KTS=kts,KTE=kte  &
                                                                    )
        ELSE
           Call wrf_error_fatal( 'arguments not present for calling nssl_2momccn')
        ENDIF
#endif
!
        CASE (GSFCGCESCHEME)
             CALL wrf_debug ( 100 , 'microphysics_driver: calling GSFCGCE' )
             IF ( PRESENT( QV_CURR ) .AND. PRESENT ( QC_CURR ) .AND.  &
                  PRESENT( QR_CURR ) .AND. PRESENT ( QI_CURR ) .AND.  &
                  PRESENT( QS_CURR )                           .AND.  &
                  PRESENT( RAINNC  ) .AND. PRESENT ( RAINNCV ) .AND.  &
                  PRESENT( HAIL    ) .AND. PRESENT ( ICE2    ) .AND.  &
                  PRESENT( Z       ) .AND. PRESENT ( W       )  ) THEN
               CALL gsfcgce(                                        &
                  TH=th                                             &
                 ,QV=qv_curr                                        &
                 ,QL=qc_curr                                        &
                 ,QR=qr_curr                                        &
                 ,QI=qi_curr                                        &
                 ,QS=qs_curr                                        &
                 ,RHO=rho, PII=pi_phy, P=p, DT_IN=dt, Z=z           &
                 ,HT=ht, DZ8W=dz8w, GRAV=G                          &
                 ,RHOWATER=rhowater, RHOSNOW=rhosnow                &
                 ,ITIMESTEP=itimestep                               &
                 ,IDS=ids,IDE=ide, JDS=jds,JDE=jde, KDS=kds,KDE=kde &
                 ,IMS=ims,IME=ime, JMS=jms,JME=jme, KMS=kms,KME=kme &
                 ,ITS=its,ITE=ite, JTS=jts,JTE=jte, KTS=kts,KTE=kte &
                 ,RAINNC=rainnc, RAINNCV=rainncv                    &
                 ,SNOWNC=snownc, SNOWNCV=snowncv ,SR=sr             &
                 ,GRAUPELNC=graupelnc ,GRAUPELNCV=graupelncv        &
                 ,REFL_10CM=refl_10cm                               &  ! added for radar reflectivity
                 ,diagflag=diagflag                                 &  ! added for radar reflectivity
                 ,do_radar_ref=do_radar_ref                         &  ! added for radar reflectivity
                 ,F_QG=fx_qg                                         &
                 ,QG=qg_curr                                        &
                 ,IHAIL=hail, ICE2=ice2                             &
                                                                    )
! HAIL = 1,  run gsfcgce with hail option
!        0,  run gsfcgce with graupel option   <---- default
!        note: no effect if ice2 = 1
! ICE2 = 1,  run gsfcgce with only snow, ice
!        2,  run gsfcgce with only graupel, ice
!        0,  run gsfcgce with snow, ice and hail/graupel   <---- default

             ELSE
                CALL wrf_error_fatal ( 'arguments not present for calling GSFCGCE' )
             ENDIF

        CASE (LINSCHEME)
             CALL wrf_debug ( 100 , 'microphysics_driver: calling lin_et_al' )
             IF ( PRESENT( QV_CURR ) .AND. PRESENT ( QC_CURR ) .AND.  &
                  PRESENT( QR_CURR ) .AND. PRESENT ( QI_CURR ) .AND.  &
                  PRESENT( QS_CURR )                           .AND.  &
                  PRESENT( RAINNC  ) .AND. PRESENT ( RAINNCV ) .AND.  &
                  PRESENT( Z       ) ) THEN
               CALL lin_et_al(                                      &
                  TH=th                                             &
                 ,QV=qv_curr                                        &
                 ,QL=qc_curr                                        &
                 ,QR=qr_curr                                        &
                 ,QI=qi_curr                                        &
                 ,QS=qs_curr                                        &
                 ,QLSINK=qlsink                                     &
                 ,RHO=rho, PII=pi_phy, P=p, DT_IN=dt, Z=z           &
                 ,HT=ht, DZ8W=dz8w, GRAV=G,  CP=cp                  &
                 ,RAIR=r_d, RVAPOR=R_v                              &
                 ,XLS=xls, XLV=xlv, XLF=xlf                         &
                 ,RHOWATER=rhowater, RHOSNOW=rhosnow                &
                 ,EP2=ep_2,SVP1=svp1,SVP2=svp2                      &
                 ,SVP3=svp3,SVPT0=svpt0                             &
                 ,RAINNC=rainnc, RAINNCV=rainncv                    &
                 ,SNOWNC=snownc, SNOWNCV=snowncv                    &
                 ,GRAUPELNC=graupelnc, GRAUPELNCV=graupelncv, SR=sr &
                 ,REFL_10CM=refl_10cm                               &  ! added for radar reflectivity
                 ,diagflag=diagflag                                 &  ! added for radar reflectivity
                 ,do_radar_ref=do_radar_ref                         &  ! added for radar reflectivity
                 ,IDS=ids,IDE=ide, JDS=jds,JDE=jde, KDS=kds,KDE=kde &
                 ,IMS=ims,IME=ime, JMS=jms,JME=jme, KMS=kms,KME=kme &
                 ,ITS=its,ITE=ite, JTS=jts,JTE=jte, KTS=kts,KTE=kte &
                 ,PRECR=precr,PRECI=preci,PRECS=precs,PRECG=precg   &
                 ,F_QG=fx_qg, F_QNDROP=fx_qndrop                      &
                 ,QG=qg_curr                                        &
                 ,QNDROP=qndrop_curr                                &
                                                                    )
             ELSE
                CALL wrf_error_fatal ( 'arguments not present for calling lin_et_al' )
             ENDIF

       CASE (SBU_YLINSCHEME)
             CALL wrf_debug ( 100 , 'microphysics_driver: calling sbu_ylin' )
             IF ( PRESENT( QV_CURR ) .AND. PRESENT ( QC_CURR ) .AND.  &
                  PRESENT( QR_CURR ) .AND. PRESENT ( QI_CURR ) .AND.  &
                  PRESENT( QS_CURR )                           .AND.  &
                  PRESENT( RI_CURR )                           .AND.  &
                  PRESENT( RAINNC  ) .AND. PRESENT ( RAINNCV ) .AND.  &
                  PRESENT( Z       ) ) THEN
               CALL sbu_ylin(                                       &
                  TH=th                                             &
                 ,QV=qv_curr                                        &
                 ,QL=qc_curr                                        &
                 ,QR=qr_curr                                        &
                 ,QI=qi_curr                                        &
                 ,QS=qs_curr                                        &
                 ,RI3D=ri_curr                                      &
!                 ,QLSINK=qlsink                                     &
                 ,RHO=rho, PII=pi_phy, P=p, DT_IN=dt, Z=z           &
                 ,HT=ht, DZ8W=dz8w                                  &
!                 , GRAV=G,  CP=cp                  &
!                 ,RAIR=r_d, RVAPOR=R_v                              &
!                 ,XLS=xls, XLV=xlv, XLF=xlf                         &
!                 ,RHOWATER=rhowater, RHOSNOW=rhosnow                &
!                 ,EP2=ep_2,SVP1=svp1,SVP2=svp2                      &
!                 ,SVP3=svp3,SVPT0=svpt0                             &
                 ,RAINNC=rainnc, RAINNCV=rainncv                    &
!                 ,SNOWNC=snownc, SNOWNCV=snowncv                    &
!                 ,GRAUPELNC=graupelnc, GRAUPELNCV=graupelncv, SR=sr &
                 ,IDS=ids,IDE=ide, JDS=jds,JDE=jde, KDS=kds,KDE=kde &
                 ,IMS=ims,IME=ime, JMS=jms,JME=jme, KMS=kms,KME=kme &
                 ,ITS=its,ITE=ite, JTS=jts,JTE=jte, KTS=kts,KTE=kte &
!                 ,PRECR=precr,PRECI=preci,PRECS=precs,PRECG=precg   &
!                 ,F_QG=fx_qg                                         &
!                 ,F_QNDROP=fx_qndrop                      &
!                 ,QG=qg_curr                                        &
!                 ,QNDROP=qndrop_curr                                &
                                                                     )
             ELSE
                CALL wrf_error_fatal ( 'arguments not present for calling sbu_ylin' )
             ENDIF


        CASE (WSM3SCHEME)
             CALL wrf_debug ( 100 , 'microphysics_driver: calling wsm3' )
             IF ( PRESENT( QV_CURR ) .AND. PRESENT ( QC_CURR ) .AND.  &
                  PRESENT( QR_CURR ) .AND.                            &
                  PRESENT( RAINNC  ) .AND. PRESENT ( RAINNCV ) .AND.  &
                  PRESENT( W       )                            ) THEN
             CALL wsm3(                                             &
                  TH=th                                             &
                 ,Q=qv_curr                                         &
                 ,QCI=qc_curr                                       &
                 ,QRS=qr_curr                                       &
                 ,W=w,DEN=rho,PII=pi_phy,P=p,DELZ=dz8w              &
                 ,DELT=dt,G=g,CPD=cp,CPV=cpv                        &
                 ,RD=r_d,RV=r_v,T0C=svpt0                           &
                 ,EP1=ep_1, EP2=ep_2, QMIN=epsilon                  &
                 ,XLS=xls, XLV0=xlv, XLF0=xlf                       &
                 ,DEN0=rhoair0, DENR=rhowater                       &
                 ,CLIQ=cliq,CICE=cice,PSAT=psat                     &
                 ,RAIN=rainnc ,RAINNCV=rainncv                      &
                 ,SNOW=snownc ,SNOWNCV=snowncv                      &
                 ,SR=sr                                             &
# ifndef _ACCEL
                 ,has_reqc=has_reqc                                 &  ! for radiation +
                 ,has_reqi=has_reqi                                 &
                 ,has_reqs=has_reqs                                 &
                 ,re_cloud=re_cloud                                 &
                 ,re_ice=re_ice                                     &
                 ,re_snow=re_snow                                   &  ! for radiation -  
# endif
                 ,IDS=ids,IDE=ide, JDS=jds,JDE=jde, KDS=kds,KDE=kde &
                 ,IMS=ims,IME=ime, JMS=jms,JME=jme, KMS=kms,KME=kme &
                 ,ITS=its,ITE=ite, JTS=jts,JTE=jte, KTS=kts,KTE=kte &
                                                                    )
             ELSE
                CALL wrf_error_fatal ( 'arguments not present for calling wsm3' )
             ENDIF

#ifndef XEON_OPTIMIZED_WSM5
        CASE (WSM5SCHEME)
             CALL wrf_debug ( 100 , 'microphysics_driver: calling wsm5' )
             IF ( PRESENT( QV_CURR ) .AND. PRESENT ( QC_CURR ) .AND.  &
                  PRESENT( QR_CURR ) .AND. PRESENT ( QI_CURR ) .AND.  &
                  PRESENT( QS_CURR ) .AND.                            &
                  PRESENT( RAINNC  ) .AND. PRESENT ( RAINNCV )  ) THEN
             CALL wsm5(                                             &
                  TH=th                                             &
                 ,Q=qv_curr                                         &
                 ,QC=qc_curr                                        &
                 ,QR=qr_curr                                        &
                 ,QI=qi_curr                                        &
                 ,QS=qs_curr                                        &
                 ,DEN=rho,PII=pi_phy,P=p,DELZ=dz8w                  &
                 ,DELT=dt,G=g,CPD=cp,CPV=cpv                        &
                 ,RD=r_d,RV=r_v,T0C=svpt0                           &
                 ,EP1=ep_1, EP2=ep_2, QMIN=epsilon                  &
                 ,XLS=xls, XLV0=xlv, XLF0=xlf                       &
                 ,DEN0=rhoair0, DENR=rhowater                       &
                 ,CLIQ=cliq,CICE=cice,PSAT=psat                     &
                 ,RAIN=rainnc ,RAINNCV=rainncv                      &
                 ,SNOW=snownc ,SNOWNCV=snowncv                      &
                 ,SR=sr                                             &
# ifndef _ACCEL
                 ,REFL_10CM=refl_10cm                               &  ! added for radar reflectivity
                 ,diagflag=diagflag                                 &  ! added for radar reflectivity
                 ,do_radar_ref=do_radar_ref                         &  ! added for radar reflectivity
                 ,has_reqc=has_reqc                                 &  ! for radiation +
                 ,has_reqi=has_reqi                                 &
                 ,has_reqs=has_reqs                                 &
                 ,re_cloud=re_cloud                                 &
                 ,re_ice=re_ice                                     &
                 ,re_snow=re_snow                                   &  ! for radiation -  
# endif
                 ,IDS=ids,IDE=ide, JDS=jds,JDE=jde, KDS=kds,KDE=kde &
                 ,IMS=ims,IME=ime, JMS=jms,JME=jme, KMS=kms,KME=kme &
                 ,ITS=its,ITE=ite, JTS=jts,JTE=jte, KTS=kts,KTE=kte &
                                                                    )
             ELSE
                CALL wrf_error_fatal ( 'arguments not present for calling wsm5' )
             ENDIF
#endif

        CASE (WSM6SCHEME)
             CALL wrf_debug ( 100 , 'microphysics_driver: calling wsm6' )
             IF ( PRESENT( QV_CURR ) .AND. PRESENT ( QC_CURR ) .AND.  &
                  PRESENT( QR_CURR ) .AND. PRESENT ( QI_CURR ) .AND.  &
                  PRESENT( QS_CURR ) .AND. PRESENT ( QG_CURR ) .AND.  &
                  PRESENT( RAINNC  ) .AND. PRESENT ( RAINNCV )  ) THEN
             CALL wsm6(                                             &
                  TH=th                                             &
                 ,Q=qv_curr                                         &
                 ,QC=qc_curr                                        &
                 ,QR=qr_curr                                        &
                 ,QI=qi_curr                                        &
                 ,QS=qs_curr                                        &
                 ,QG=qg_curr                                        &
                 ,DEN=rho,PII=pi_phy,P=p,DELZ=dz8w                  &
                 ,DELT=dt,G=g,CPD=cp,CPV=cpv                        &
                 ,RD=r_d,RV=r_v,T0C=svpt0                           &
                 ,EP1=ep_1, EP2=ep_2, QMIN=epsilon                  &
                 ,XLS=xls, XLV0=xlv, XLF0=xlf                       &
                 ,DEN0=rhoair0, DENR=rhowater                       &
                 ,CLIQ=cliq,CICE=cice,PSAT=psat                     &
                 ,RAIN=rainnc ,RAINNCV=rainncv                      &
                 ,SNOW=snownc ,SNOWNCV=snowncv                      &
                 ,SR=sr                                             &
                 ,REFL_10CM=refl_10cm                               &  ! added for radar reflectivity
                 ,diagflag=diagflag                                 &  ! added for radar reflectivity
                 ,do_radar_ref=do_radar_ref                         &  ! added for radar reflectivity
                 ,GRAUPEL=graupelnc ,GRAUPELNCV=graupelncv          &
                 ,has_reqc=has_reqc                                 &  ! for radiation +
                 ,has_reqi=has_reqi                                 &
                 ,has_reqs=has_reqs                                 &
                 ,re_cloud=re_cloud                                 &
                 ,re_ice=re_ice                                     &
                 ,re_snow=re_snow                                   &  ! for radiation -  
                 ,IDS=ids,IDE=ide, JDS=jds,JDE=jde, KDS=kds,KDE=kde &
                 ,IMS=ims,IME=ime, JMS=jms,JME=jme, KMS=kms,KME=kme &
                 ,ITS=its,ITE=ite, JTS=jts,JTE=jte, KTS=kts,KTE=kte &
                                                                    )
             ELSE
                CALL wrf_error_fatal ( 'arguments not present for calling wsm6' )
             ENDIF

        CASE (WDM5SCHEME)
             CALL wrf_debug ( 100 , 'microphysics_driver: calling wdm5' )
             IF ( PRESENT( QV_CURR ) .AND. PRESENT ( QC_CURR ) .AND.  &
                  PRESENT( QR_CURR ) .AND. PRESENT ( QI_CURR ) .AND.  &
                  PRESENT( QS_CURR ) .AND. PRESENT( QNN_CURR ) .AND.  &
                  PRESENT ( QNC_CURR ) .AND. PRESENT( QNR_CURR ).AND.  &
                  PRESENT( RAINNC  ) .AND. PRESENT ( RAINNCV )  ) THEN
             CALL wdm5(                                             &
                  TH=th                                             &
                 ,Q=qv_curr                                         &
                 ,QC=qc_curr                                        &
                 ,QR=qr_curr                                        &
                 ,QI=qi_curr                                        &
                 ,QS=qs_curr                                        &
                 ,NN=qnn_curr                                       &
                 ,NC=qnc_curr                                       &
                 ,NR=qnr_curr                                       &
                 ,DEN=rho,PII=pi_phy,P=p,DELZ=dz8w                  &
                 ,DELT=dt,G=g,CPD=cp,CPV=cpv,CCN0=ccn_conc          & ! RAS
                 ,RD=r_d,RV=r_v,T0C=svpt0                           &
                 ,EP1=ep_1, EP2=ep_2, QMIN=epsilon                  &
                 ,XLS=xls, XLV0=xlv, XLF0=xlf                       &
                 ,DEN0=rhoair0, DENR=rhowater                       &
                 ,CLIQ=cliq,CICE=cice,PSAT=psat                     &
                 ,RAIN=rainnc ,RAINNCV=rainncv                      &
                 ,SNOW=snownc ,SNOWNCV=snowncv                      &
                 ,SR=sr                                             &
                 ,REFL_10CM=refl_10cm                               &  ! added for radar reflectivity
                 ,diagflag=diagflag                                 &  ! added for radar reflectivity
                 ,do_radar_ref=do_radar_ref                         &  ! added for radar reflectivity
                 ,has_reqc=has_reqc                                 &  ! for radiation +
                 ,has_reqi=has_reqi                                 &
                 ,has_reqs=has_reqs                                 &
                 ,re_cloud=re_cloud                                 &
                 ,re_ice=re_ice                                     &
                 ,re_snow=re_snow                                   &  ! for radiation -       
                 ,ITIMESTEP=itimestep                               & 
                 ,IDS=ids,IDE=ide, JDS=jds,JDE=jde, KDS=kds,KDE=kde &
                 ,IMS=ims,IME=ime, JMS=jms,JME=jme, KMS=kms,KME=kme &
                 ,ITS=its,ITE=ite, JTS=jts,JTE=jte, KTS=kts,KTE=kte &
                                                                    )
             ELSE
                CALL wrf_error_fatal ( 'arguments not present for calling wdm5')
             ENDIF

       CASE (WDM6SCHEME)
             CALL wrf_debug ( 100 , 'microphysics_driver: calling wdm6' )
             IF ( PRESENT( QV_CURR ) .AND. PRESENT ( QC_CURR ) .AND.  &
                  PRESENT( QR_CURR ) .AND. PRESENT ( QI_CURR ) .AND.  &
                  PRESENT( QS_CURR ) .AND. PRESENT ( QG_CURR ) .AND.  &
                  PRESENT( QNN_CURR ) .AND. PRESENT ( QNC_CURR ) .AND. &
                  PRESENT( QNR_CURR ).AND.                            &
                 PRESENT( RAINNC  ) .AND. PRESENT ( RAINNCV )  ) THEN
             CALL wdm6(                                             &
                  TH=th                                             &
                 ,Q=qv_curr                                         &
                 ,QC=qc_curr                                        &
                 ,QR=qr_curr                                        &
                 ,QI=qi_curr                                        &
                 ,QS=qs_curr                                        &
                 ,QG=qg_curr                                        &
                 ,NN=qnn_curr                                       &
                 ,NC=qnc_curr                                       &
                 ,NR=qnr_curr                                       &
                 ,DEN=rho,PII=pi_phy,P=p,DELZ=dz8w                  &
                 ,DELT=dt,G=g,CPD=cp,CPV=cpv,CCN0=ccn_conc          & ! RAS
                 ,RD=r_d,RV=r_v,T0C=svpt0                           &
                 ,EP1=ep_1, EP2=ep_2, QMIN=epsilon                  &
                 ,XLS=xls, XLV0=xlv, XLF0=xlf                       &
                 ,DEN0=rhoair0, DENR=rhowater                       &
                 ,CLIQ=cliq,CICE=cice,PSAT=psat                     &
                 ,RAIN=rainnc ,RAINNCV=rainncv                      &
                 ,SNOW=snownc ,SNOWNCV=snowncv                      &
                 ,SR=sr                                             &
                 ,REFL_10CM=refl_10cm                               &  ! added for radar reflectivity
                 ,diagflag=diagflag                                 &  ! added for radar reflectivity
                 ,do_radar_ref=do_radar_ref                         &  ! added for radar reflectivity
                 ,GRAUPEL=graupelnc ,GRAUPELNCV=graupelncv          &
                 ,ITIMESTEP=itimestep                               & 
                 ,has_reqc=has_reqc                                 &  ! for radiation +
                 ,has_reqi=has_reqi                                 &
                 ,has_reqs=has_reqs                                 &
                 ,re_cloud=re_cloud                                 &
                 ,re_ice=re_ice                                     & 
                 ,re_snow=re_snow                                   &  ! for radiation -  
                 ,IDS=ids,IDE=ide, JDS=jds,JDE=jde, KDS=kds,KDE=kde &
                 ,IMS=ims,IME=ime, JMS=jms,JME=jme, KMS=kms,KME=kme &
                 ,ITS=its,ITE=ite, JTS=jts,JTE=jte, KTS=kts,KTE=kte &
                                                                    )
             ELSE
               CALL wrf_error_fatal ( 'arguments not present for calling wdm6')
             ENDIF
#if(NMM_CORE==1)
        CASE (ETAMP_HWRF)
             CALL wrf_debug ( 100 , 'microphysics_driver: calling etampnew_HWRF')

             IF ( PRESENT( qv_curr ) .AND. PRESENT( qt_curr ) .AND. &
                  PRESENT( RAINNC  ) .AND. PRESENT ( RAINNCV ) .AND.  &
                  PRESENT( mp_restart_state )                  .AND. &
                  PRESENT( tbpvs_state )                      .AND. &
                  PRESENT( tbpvs0_state )                       ) THEN

               CALL ETAMP_NEW_HWRF(                                      &
                  ITIMESTEP=itimestep,DT=dt,DX=dx,DY=dy, GID=id &
                 ,RAINNC=rainnc,RAINNCV=rainncv                     &
                 ,DZ8W=dz8w,RHO_PHY=rho,P_PHY=p,PI_PHY=pi_phy,TH_PHY=th &
                 ,QV=qv_curr                                        &
                 ,QT=qt_curr                                        &
                 ,LOWLYR=LOWLYR,SR=SR                               &
                 ,F_ICE_PHY=F_ICE_PHY,F_RAIN_PHY=F_RAIN_PHY         &
                 ,F_RIMEF_PHY=F_RIMEF_PHY                           &
                 ,QC=qc_curr,QR=Qr_curr,QI=Qi_curr                  &
                 ,IDS=ids,IDE=ide, JDS=jds,JDE=jde, KDS=kds,KDE=kde &
                 ,IMS=ims,IME=ime, JMS=jms,JME=jme, KMS=kms,KME=kme &
                 ,ITS=its,ITE=ite, JTS=jts,JTE=jte, KTS=kts,KTE=kte &
                                                                    )
             ELSE
                CALL wrf_error_fatal ( 'arguments not present for calling etampnew' )
             ENDIF
#endif
        CASE (ETAMPNEW)    !-- Operational 4-km High-Resolution Window (HRW) version
             CALL wrf_debug ( 100 , 'microphysics_driver: calling etampnew')

             IF ( PRESENT( qv_curr ) .AND. PRESENT( qt_curr ) .AND. &
                  PRESENT( RAINNC  ) .AND. PRESENT ( RAINNCV ) .AND.  &
                  PRESENT( mp_restart_state )                  .AND. &
                  PRESENT( tbpvs_state )                      .AND. &
                  PRESENT( tbpvs0_state )                       ) THEN
               CALL ETAMP_NEW(                                      &
                  ITIMESTEP=itimestep,DT=dt,DX=dx,DY=dy             &
                 ,DZ8W=dz8w,RHO_PHY=rho,P_PHY=p,PI_PHY=pi_phy,TH_PHY=th &
                 ,QV=qv_curr                                        &
                 ,QC=qc_curr                                        &
                 ,QS=qs_curr                                        &
                 ,QR=qr_curr                                        &
                 ,QT=qt_curr                                        &
                 ,LOWLYR=LOWLYR,SR=SR                               &
                 ,F_ICE_PHY=F_ICE_PHY,F_RAIN_PHY=F_RAIN_PHY         &
                 ,F_RIMEF_PHY=F_RIMEF_PHY                           &
                 ,RAINNC=rainnc,RAINNCV=rainncv                     &
                 ,IDS=ids,IDE=ide, JDS=jds,JDE=jde, KDS=kds,KDE=kde &
                 ,IMS=ims,IME=ime, JMS=jms,JME=jme, KMS=kms,KME=kme &
                 ,ITS=its,ITE=ite, JTS=jts,JTE=jte, KTS=kts,KTE=kte &
                 ,MP_RESTART_STATE=mp_restart_state                 &
                 ,TBPVS_STATE=tbpvs_state,TBPVS0_STATE=tbpvs0_state &
                                                                    )
             ELSE
                CALL wrf_error_fatal ( 'arguments not present for calling etampnew' )
             ENDIF
#if(EM_CORE==1)
          CASE (CAMMGMPSCHEME)
             CALL wrf_debug ( 100 , 'microphysics_driver: calling CAMMGMPSCHEME')
             IF ( PRESENT( z          ) .AND. PRESENT( ht          ) .AND. &
                  PRESENT( qs_curr    ) .AND.                              &
                  PRESENT( qv_curr    ) .AND. PRESENT( qc_curr     ) .AND. &
                  PRESENT( qi_curr    ) .AND. PRESENT( fx_qc        ) .AND. &
                  PRESENT( qr_curr    ) .AND. PRESENT( qndrop_curr ) .AND. &                  
                  PRESENT( fx_qi       ) .AND. PRESENT( qnc_curr    ) .AND. &
                  PRESENT( RAINNCV    ) .AND. PRESENT( SNOWNCV     ) .AND. &
                  PRESENT( qns_curr   ) .AND. PRESENT( qnr_curr    ) .AND. &
#if ( WRF_CHEM == 1 )
                  PRESENT( chem       ) .AND. PRESENT(dgnum4D      )  .AND. &
                  PRESENT( dgnumwet4D ) .AND.                           &
#endif
                  PRESENT( qni_curr   ) .AND. PRESENT( RAINNC      ) ) THEN
#if ( WRF_CHEM == 1 )
                qv_b4mp(its:ite,kts:kte,jts:jte) = qv_curr(its:ite,kts:kte,jts:jte)
                qc_b4mp(its:ite,kts:kte,jts:jte) = qc_curr(its:ite,kts:kte,jts:jte)
                qi_b4mp(its:ite,kts:kte,jts:jte) = qi_curr(its:ite,kts:kte,jts:jte)
                qs_b4mp(its:ite,kts:kte,jts:jte) = qs_curr(its:ite,kts:kte,jts:jte)
#endif
                  
                CALL CAMMGMP(ITIMESTEP=itimestep,DT=dt,P8W=p8w_hyd,P_HYD=p_hyd    &
                     ,T_PHY=t_phy,PI_PHY=pi_phy,Z_AT_W=z_at_w,QFX=qfx             &
                     ,TKE_PBL=tke_pbl,TURBTYPE3D=turbtype3d,SMAW3D=smaw3d     &
                     ,DLF3D=dlf,DLF2_3D=dlf2,RLIQ2D=rliq,Z_SEA_LEVEL=z            &
                     ,KVH3D=exch_h,HT=ht,ALT=alt,ACCUM_MODE=accum_mode            &
                     ,AITKEN_MODE=aitken_mode,COARSE_MODE=coarse_mode             &
                     ,ICWMRSH3D=icwmrsh3d,ICWMRDP3D=icwmrdp3d,SHFRC3D=shfrc3d     &
                     ,CMFMC3D=cmfmc3d,CMFMC2_3D=cmfmc2_3d                         &
                     ,CONFIG_FLAGS=config_flags,F_ICE_PHY=f_ice_phy               &
                     ,F_RAIN_PHY=f_rain_phy                                       &
#if ( WRF_CHEM == 1 )
                     ,DGNUM4D=dgnum4D,DGNUMWET4D=dgnumwet4D                       &
#endif
                     ,IDS=ids,IDE=ide, JDS=jds,JDE=jde, KDS=kds,KDE=kde           &
                     ,IMS=ims,IME=ime, JMS=jms,JME=jme, KMS=kms,KME=kme           &
                     ,ITS=its,ITE=ite, JTS=jts,JTE=jte, KTS=kts,KTE=kte           &
!Output variables from CAMMGMP
                     ,TH=th,CLDFRA_OLD_MP=cldfra_old_mp,CLDFRA_MP=cldfra_mp       &
                     ,CLDFRA_MP_ALL=cldfra_mp_all,lradius=lradius,iradius=iradius &
                     ,CLDFRAI=cldfrai,CLDFRAL=cldfral                             &
                     ,CLDFRA_CONV=cldfra_conv,WSEDL3D=wsedl3d                     &
                     ,RAINNC=rainnc,RAINNCV=rainncv,SNOWNC=snownc,SNOWNCV=snowncv &
                     ,SR=sr,QV_CURR=qv_curr,QC_CURR=qc_curr,QI_CURR=qi_curr       &
                     ,QS_CURR=qs_curr,QR_CURR=qr_curr,NC3D=qnc_curr               &
                     ,NI3D=qni_curr,NS3D=qns_curr,NR3D=qnr_curr,QNDROP=qndrop_curr&
                     ,RH_OLD_MP=rh_old_mp,LCD_OLD_MP=lcd_old_mp                   &
#if ( WRF_CHEM == 1 )
                     ,CHEM=chem                                                   &
                     ,QME3D=qme3d,PRAIN3D=prain3d,NEVAPR3D=nevapr3d               &
                     ,RATE1ORD_CW2PR_ST3D=rate1ord_cw2pr_st3d                     &
#endif
                     ,XLAND=XLAND,SNOWH=SNOWH                                     &
                     )
             ELSE
                CALL wrf_error_fatal ( 'arguments not present for calling CAMMGMP SCHEME' )
             ENDIF
#endif

      CASE DEFAULT

         WRITE( wrf_err_message , * ) 'The microphysics option does not exist: mp_physics = ', mp_physics
         CALL wrf_error_fatal ( wrf_err_message )

      END SELECT micro_select
!.. Select piggybacking microphysics	  

   IF (do_piggyback == 1) THEN
    piggy_micro_select: SELECT CASE(mp_physics_pg)
        CASE (KESSLERSCHEME_PG)
             CALL wrf_debug ( 100 , 'microphysics_driver: calling kessler piggybacking' )
             IF ( PRESENT( QV_PG_CURR ) .AND. PRESENT( QC_PG_CURR ) .AND.  &
                                           PRESENT( QR_PG_CURR ) .AND.  &
                  PRESENT( RAINNCPG ) .AND. PRESENT ( RAINNCVPG ) .AND.  &
                                           PRESENT( Z       ))  THEN
               CALL kessler(                                        &
                  T=th_pg                                              &
                 ,QV=qv_pg_curr                                        &
                 ,QC=qc_pg_curr                                        &
                 ,QR=qr_pg_curr                                        &
                 ,RHO=rho, PII=pi_phy,DT_IN=dt, Z=z, XLV=xlv, CP=cp &
                 ,EP2=ep_2,SVP1=svp1,SVP2=svp2                      &
                 ,SVP3=svp3,SVPT0=svpt0,RHOWATER=rhowater           &
                 ,DZ8W=dz8w                                         &
                 ,RAINNC=rainncpg,RAINNCV=rainncvpg                     &
                 ,IDS=ids,IDE=ide, JDS=jds,JDE=jde, KDS=kds,KDE=kde &
                 ,IMS=ims,IME=ime, JMS=jms,JME=jme, KMS=kms,KME=kme &
                 ,ITS=its,ITE=ite, JTS=jts,JTE=jte, KTS=kts,KTE=kte &
                                                                    )
             ELSE
                CALL wrf_error_fatal ( 'arguments not present for calling kessler piggybacking' )
             ENDIF

!
        CASE (THOMPSONAERO_PG)
             CALL wrf_debug ( 100 , 'microphysics_driver: calling thompson aero piggybacking' )
             IF ( PRESENT( QV_PG_CURR ) .AND. PRESENT ( QC_PG_CURR )   .AND.  &
                  PRESENT( QR_PG_CURR ) .AND. PRESENT ( QI_PG_CURR )   .AND.  &
                  PRESENT( QS_PG_CURR ) .AND. PRESENT ( QG_PG_CURR )   .AND.  &
                  PRESENT( QNR_PG_CURR ) .AND. PRESENT ( QNI_PG_CURR )   .AND.  &
                  PRESENT( QNC_PG_CURR ) .AND. PRESENT ( QNWFA_PG_CURR ) .AND.  &
                  PRESENT( QNIFA_PG_CURR ).AND.PRESENT ( QNWFA2D_PG )    .AND.  &
                  PRESENT( SNOWNCPG )   .AND. PRESENT ( SNOWNCVPG )    .AND.  &
                  PRESENT( GRAUPELNCPG ).AND. PRESENT ( GRAUPELNCVPG ) .AND.  &
                  PRESENT( RAINNCPG ) .AND. PRESENT ( RAINNCVPG ) ) THEN
#if ( WRF_CHEM == 1 )
                 qv_b4mp(its:ite,kts:kte,jts:jte) = qv_pg_curr(its:ite,kts:kte,jts:jte)
                 qc_b4mp(its:ite,kts:kte,jts:jte) = qc_pg_curr(its:ite,kts:kte,jts:jte)
                 qi_b4mp(its:ite,kts:kte,jts:jte) = qi_pg_curr(its:ite,kts:kte,jts:jte)
                 qs_b4mp(its:ite,kts:kte,jts:jte) = qs_pg_curr(its:ite,kts:kte,jts:jte)
#endif
             CALL mp_gt_driver(                          &
                     QV=qv_pg_curr,                         &
                     QC=qc_pg_curr,                         &
                     QR=qr_pg_curr,                         &
                     QI=qi_pg_curr,                         &
                     QS=qs_pg_curr,                         &
                     QG=qg_pg_curr,                         &
                     NI=qni_pg_curr,                        &
                     NR=qnr_pg_curr,                        &
                     NC=qnc_pg_curr,                        &
                     NWFA=qnwfa_pg_curr,                    &
                     NIFA=qnifa_pg_curr,                    &
                     NWFA2D=qnwfa2d_pg,                     &
                     TH=th_pg,                              &
                     PII=pi_phy,                         &
                     P=p,                                &
                     W=w,                                &
                     DZ=dz8w,                            &
                     DT_IN=dt,                           &
                     ITIMESTEP=itimestep,                &
                     RAINNC=RAINNCPG,                      &
                     RAINNCV=RAINNCVPG,                    &
                     SNOWNC=SNOWNCPG,                      &
                     SNOWNCV=SNOWNCVPG,                    &
                     GRAUPELNC=GRAUPELNCPG,                &
                     GRAUPELNCV=GRAUPELNCVPG,              &
                     SR=sr_pg,                              &
#if ( WRF_CHEM == 1 )
                     RAINPROD=rainprod,                  &
                     EVAPPROD=evapprod,                  &
#endif
                     REFL_10CM=refl_10cm_pg,                &
                     diagflag=diagflag,                  &
                     do_radar_ref=do_radar_ref,          &
                     re_cloud=re_cloud,                  &
                     re_ice=re_ice,                      &
                     re_snow=re_snow,                    &
                     has_reqc=has_reqc,                  & ! G. Thompson
                     has_reqi=has_reqi,                  & ! G. Thompson
                     has_reqs=has_reqs,                  & ! G. Thompson
                 IDS=ids,IDE=ide, JDS=jds,JDE=jde, KDS=kds,KDE=kde, &
                 IMS=ims,IME=ime, JMS=jms,JME=jme, KMS=kms,KME=kme, &
                 ITS=its,ITE=ite, JTS=jts,JTE=jte, KTS=kts,KTE=kte)
             ELSE
                CALL wrf_error_fatal ( 'arguments not present for calling thompson_et_al aero piggybacking' )
             ENDIF
			 
        CASE (THOMPSON_PG)
             CALL wrf_debug ( 100 , 'microphysics_driver: calling thompson piggybacking' )
             IF ( PRESENT( QV_PG_CURR ) .AND. PRESENT ( QC_PG_CURR ) .AND.  &
                  PRESENT( QR_PG_CURR ) .AND. PRESENT ( QI_PG_CURR ) .AND.  &
                  PRESENT( QS_PG_CURR ) .AND. PRESENT ( QG_PG_CURR ) .AND.  &
                  PRESENT( QNR_PG_CURR ) .AND. PRESENT ( QNI_PG_CURR ) .AND.  &
!                  PRESENT( SNOWNCPG ) .AND. PRESENT ( SNOWNCVPG ) .AND.        &
!                  PRESENT( GRAUPELNCPG ) .AND. PRESENT ( GRAUPELNCVPG ) .AND.  &
                  PRESENT( RAINNCPG ) .AND. PRESENT ( RAINNCVPG ) ) THEN
#if ( WRF_CHEM == 1 )
                 qv_b4mp(its:ite,kts:kte,jts:jte) = qv_pg_curr(its:ite,kts:kte,jts:jte)
                 qc_b4mp(its:ite,kts:kte,jts:jte) = qc_pg_curr(its:ite,kts:kte,jts:jte)
                 qi_b4mp(its:ite,kts:kte,jts:jte) = qi_pg_curr(its:ite,kts:kte,jts:jte)
                 qs_b4mp(its:ite,kts:kte,jts:jte) = qs_pg_curr(its:ite,kts:kte,jts:jte)
#endif
             CALL mp_gt_driver(                          &
                     QV=qv_pg_curr,                         &
                     QC=qc_pg_curr,                         &
                     QR=qr_pg_curr,                         &
                     QI=qi_pg_curr,                         &
                     QS=qs_pg_curr,                         &
                     QG=qg_pg_curr,                         &
                     NI=qni_pg_curr,                        &
                     NR=qnr_pg_curr,                        &
                     TH=th_pg,                              &
                     PII=pi_phy,                         &
                     P=p,                                &
                     W=w,                                &
                     DZ=dz8w,                            &
                     DT_IN=dt,                           &
                     ITIMESTEP=itimestep,                &
                     RAINNC=RAINNCPG,                      &
                     RAINNCV=RAINNCVPG,                    &
                     SNOWNC=SNOWNCPG,                      &
                     SNOWNCV=SNOWNCVPG,                    &
                     GRAUPELNC=GRAUPELNCPG,                &
                     GRAUPELNCV=GRAUPELNCVPG,              &
                     SR=sr_pg,                              &
#if ( WRF_CHEM == 1 )
                     RAINPROD=rainprod,                  &
                     EVAPPROD=evapprod,                  &
#endif
                     REFL_10CM=refl_10cm_pg,                &
                     diagflag=diagflag,                  &
                     do_radar_ref=do_radar_ref,          &
                     re_cloud=re_cloud,                  & ! G. Thompson
                     re_ice=re_ice,                      & ! G. Thompson
                     re_snow=re_snow,                    & ! G. Thompson
                     has_reqc=has_reqc,                  & ! G. Thompson
                     has_reqi=has_reqi,                  & ! G. Thompson
                     has_reqs=has_reqs,                  & ! G. Thompson
                 IDS=ids,IDE=ide, JDS=jds,JDE=jde, KDS=kds,KDE=kde, &
                 IMS=ims,IME=ime, JMS=jms,JME=jme, KMS=kms,KME=kme, &
                 ITS=its,ITE=ite, JTS=jts,JTE=jte, KTS=kts,KTE=kte)
             ELSE
                CALL wrf_error_fatal ( 'arguments not present for calling thompson_et_al piggybacking' )
             ENDIF

        CASE (DETAILED_PG)
             CALL wrf_debug ( 100 , 'microphysics_driver: calling geresdi detailed/bin model piggybacking' )
             CALL mp_gi_pg_driver(                          &
                     itimestep,th_pg,pi_phy,p,dt,dz8w,rho,  &
                     t_old_pg,dx,dy,                        &
                     scalar_old, scalar,                 &
                     n_scalar,ssw_pg,ssi_pg,          &
                     DNW_ACTV_PG,DNW_COAG_PG,DNW_BRUP_PG,DNI_COLL_PG,&
                     DMW_DIFF_PG,DMW_MELT_PG,DMI_DIFF_PG,DMWI_MELT_PG,&
                     DMWI_DIFF_PG,DMW_RIME_PG,DMW_FREZ_PG,DMG_RIME_PG,&
                     RAINNCPG, RAINNCVPG,                    &
                     snowncpg, snowncvpg,                    &
                     graupelncpg, graupelncvpg,              &
                     sr_pg,refl_10cm_pg,diagflag,do_radar_ref,&
                     ids,ide, jds,jde, kds,kde,          &
                     ims,ime, jms,jme, kms,kme,          &
                     its,ite, jts,jte, kts,kte)

#if (EM_CORE==1)
!       CASE (FAST_KHAIN_LYNN_PG)
!             CALL wrf_debug ( 100 , 'microphysics_driver: calling sbm piggybacking' )
!               CALL fast_sbm(W=w,U=u,V=v,TH_OLD=th_old_pg          &
!                 ,CHEM_new=scalar,N_CHEM=num_scalar_x                     &
!                 ,ITIMESTEP=itimestep,DT=dt,DX=dx,DY=dy             &
!                 ,DZ8W=dz8w,RHO_PHY=rho,P_PHY=p,PI_PHY=pi_phy,TH_PHY=th_pg &
!                 ,xland=xland                                       &
!                 ,ivgtyp=ivgtyp                                      &
!                 ,xlat=xlat                                        &
!                 ,xlong=xlong                                        &
!                 ,QV=qv_pg_curr                                        &
!                 ,QC=qc_pg_curr                                        &
!                 ,QR=qr_pg_curr                                        &
!                 ,QI=qi_pg_curr                                        &
!                 ,QS=qs_pg_curr                                        &
!                 ,QG=qg_pg_curr                                        &
!                 ,QV_OLD=qv_old_pg                                     &
!                 ,QNC=qnc_pg_curr                                      &
!                 ,QNR=qnr_pg_curr                                      &
!                 ,QNS=qns_pg_curr                                      &
!                 ,QNG=qng_pg_curr                                      &
!                 ,QNA=qnn_pg_curr                                      &
!                 ,IDS=ids,IDE=ide, JDS=jds,JDE=jde, KDS=kds,KDE=kde &
!                 ,IMS=ims,IME=ime, JMS=jms,JME=jme, KMS=kms,KME=kme &
!                 ,ITS=its,ITE=ite, JTS=jts,JTE=jte, KTS=kts,KTE=kte &
!                 ,REFL_10CM=refl_10cm_pg                 &  ! added for radar reflectivity
!                 ,diagflag=diagflag                   &  ! added for radar reflectivity
!                 ,do_radar_ref=do_radar_ref           &  ! added for radar reflectivity
!                 ,RAINNC=RAINNCPG)
!
!!
!       CASE (FULL_KHAIN_LYNN_PG)
!             CALL wrf_debug ( 100 , 'microphysics_driver: calling sbm piggybacking' )
!               CALL sbm(W=w,U=u,V=v,TH_OLD=th_old_pg          &
!                 ,CHEM_new=scalar,N_CHEM=num_scalar_x                     &
!                 ,ITIMESTEP=itimestep,DT=dt,DX=dx,DY=dy             &
!                 ,DZ8W=dz8w,RHO_PHY=rho,P_PHY=p,PI_PHY=pi_phy,TH_PHY=th_pg &
!                 ,xland=xland                                       &
!                 ,ivgtyp=ivgtyp                                      &
!                 ,xlat=xlat                                        &
!                 ,xlong=xlong                                        &
!                 ,QV=qv_pg_curr                                        &
!                 ,QC=qc_pg_curr                                        &
!                 ,QR=qr_pg_curr                                        &
!                 ,QIP=qip_pg_curr                                        &
!                 ,QIC=qic_pg_curr                                        &
!                 ,QID=qid_pg_curr                                        &
!                 ,QS=qs_pg_curr                                        &
!                 ,QG=qg_pg_curr                                        &
!                 ,QH=qh_pg_curr                                        &
!                 ,QV_OLD=qv_old_pg                                     &
!                 ,QNC=qnc_pg_curr                                      &
!                 ,QNR=qnr_pg_curr                                      &
!                 ,QNIP=qnip_pg_curr                                      &
!                 ,QNIC=qnic_pg_curr                                      &
!                 ,QNID=qnid_pg_curr                                      &
!                 ,QNS=qns_pg_curr                                      &
!                 ,QNG=qng_pg_curr                                      &
!                 ,QNH=qng_pg_curr                                      &
!                 ,QNA=qnn_pg_curr                                      &
!                 ,EFFR=effr_curr                                  &
!                 ,ICE_EFFR=ice_effr_curr                                  &
!                 ,TOT_EFFR=tot_effr_curr                                  &
!                 ,QIC_EFFR=qic_effr_curr                                  &
!                 ,QIP_EFFR=qip_effr_curr                                  &
!                 ,QID_EFFR=qid_effr_curr                                  &
!                 ,height=height                                        &
!                 ,tempc=tempc                                         &
!                 ,kext_ql=kext_ql                                       &
!                 ,kext_qs=kext_qs                                       &
!                 ,kext_qg=kext_qg                                       &
!                 ,kext_qh=kext_qh                                       &
!                 ,kext_qa=kext_qa                                       &
!                 ,kext_qic=kext_qic                                       &
!                 ,kext_qip=kext_qip                                       &
!                 ,kext_qid=kext_qid                                       &
!                 ,kext_ft_qic=kext_ft_qic                                       &
!                 ,kext_ft_qip=kext_ft_qip                                       &
!                 ,kext_ft_qid=kext_ft_qid                                       &
!                 ,kext_ft_qs=kext_ft_qs                                       &
!                 ,kext_ft_qg=kext_ft_qg                                       &
!                 ,IDS=ids,IDE=ide, JDS=jds,JDE=jde, KDS=kds,KDE=kde &
!                 ,IMS=ims,IME=ime, JMS=jms,JME=jme, KMS=kms,KME=kme &
!                 ,ITS=its,ITE=ite, JTS=jts,JTE=jte, KTS=kts,KTE=kte &
!                 ,REFL_10CM=refl_10cm_pg                 &  ! added for radar reflectivity
!                 ,diagflag=diagflag                   &  ! added for radar reflectivity
!                 ,do_radar_ref=do_radar_ref           &  ! added for radar reflectivity
!                 ,RAINNC=RAINNCPG)
#endif

!

    CASE (MORR_TWO_MOMENT_PG)
         CALL wrf_debug(100, 'microphysics_driver: calling morrison two moment piggybacking')
         IF (PRESENT ( QV_PG_CURR ) .AND. PRESENT ( QC_PG_CURR ) .AND. &
             PRESENT ( QR_PG_CURR ) .AND. PRESENT ( QI_PG_CURR ) .AND. &
         PRESENT ( QS_PG_CURR ) .AND. PRESENT ( QG_PG_CURR ) .AND. &
         PRESENT ( QR_PG_CURR ) .AND. PRESENT ( QI_PG_CURR ) .AND. &
         PRESENT ( QNS_PG_CURR ) .AND. PRESENT ( QNI_PG_CURR ).AND. &
         PRESENT ( QNR_PG_CURR ) .AND. PRESENT ( QNG_PG_CURR ).AND. &
         PRESENT (MU) .AND. PRESENT (QSCUTEN_PG).AND. &
         PRESENT ( QRCUTEN_PG ) .AND. PRESENT ( QICUTEN_PG ).AND. &
         PRESENT ( RAINNCPG ) .AND. PRESENT ( RAINNCVPG ) .AND. &
         PRESENT (Z      ) .AND.PRESENT ( W      )  ) THEN
         CALL mp_morr_two_moment_driver(                            &
                     ITIMESTEP=itimestep,                &  !*
                     TH=th_pg,                              &  !*
                     QV=qv_pg_curr,                         &  !*
                     QC=qc_pg_curr,                         &  !*
                     QR=qr_pg_curr,                         &  !*
                     QI=qi_pg_curr,                         &  !*
                     QS=qs_pg_curr,                         &  !*
                     QG=qg_pg_curr,                         &  !*
                     NI=qni_pg_curr,                        &  !*
                     NS=qns_pg_curr,                        &  !* ! VVT
                     NR=qnr_pg_curr,                        &  !* ! VVT
                     NG=qng_pg_curr,                        &  !* ! VVT
                     RHO=rho,                            &  !*
                     PII=pi_phy,                         &  !*
                     P=p,                                &  !*
                     DT_IN=dt,                           &  !*
                     DZ=dz8w,                            &  !* !hm
                     HT=ht,                              &  !*
                     W=w                                 &  !*
                    ,RAINNC=RAINNCPG                       &  !*
                    ,RAINNCV=RAINNCVPG                     &  !*
                    ,SNOWNC=SNOWNCPG                       &  !*
                    ,SNOWNCV=SNOWNCVPG                     &  !*
                    ,GRAUPELNC=GRAUPELNCPG                 &  !*
                    ,GRAUPELNCV=GRAUPELNCVPG               &  !*
                    ,SR=sr_pg                               &  !* !hm
                    ,REFL_10CM=refl_10cm_pg                 &  ! added for radar reflectivity
                    ,diagflag=diagflag                   &  ! added for radar reflectivity
                    ,do_radar_ref=do_radar_ref           &  ! added for radar reflectivity
                    ,qrcuten=qrcuten_pg                     &  ! hm
                    ,qscuten=qscuten_pg                     &  ! hm
                    ,qicuten=qicuten_pg                     &  ! hm
                    ,mu=mu                          &  ! hm
                    ,F_QNDROP=fx_pg_qndrop                   &  ! hm for wrf-chem
                 ,QNDROP=qndrop_pg_curr                     &  ! hm for wrf-chem
                 ,IDS=ids,IDE=ide, JDS=jds,JDE=jde, KDS=kds,KDE=kde &
                 ,IMS=ims,IME=ime, JMS=jms,JME=jme, KMS=kms,KME=kme &
                 ,ITS=its,ITE=ite, JTS=jts,JTE=jte, KTS=kts,KTE=kte &
                 ,QLSINK=qlsink                                     & ! jdf for wrf-chem
#if ( WRF_CHEM == 1 )
                 ,EVAPPROD=evapprod,RAINPROD=rainprod               &
#endif
                 ,PRECR=precr,PRECI=preci,PRECS=precs,PRECG=precg   & ! jdf for wrf-chem
                                                                    )
        ELSE
           Call wrf_error_fatal( 'arguments not present for calling morrison two moment piggybacking')
        ENDIF


    CASE (MILBRANDT2MOM_PG)
         CALL wrf_debug(100, 'microphysics_driver: calling milbrandt2mom piggybacking')
         IF (PRESENT ( QV_PG_CURR ) .AND.                           &
             PRESENT ( QC_PG_CURR ) .AND. PRESENT ( QNC_PG_CURR )  .AND. &
             PRESENT ( QR_PG_CURR ) .AND. PRESENT ( QNR_PG_CURR )  .AND. &
             PRESENT ( QI_PG_CURR ) .AND. PRESENT ( QNI_PG_CURR )  .AND. &
             PRESENT ( QS_PG_CURR ) .AND. PRESENT ( QNS_PG_CURR )  .AND. &
             PRESENT ( QG_PG_CURR ) .AND. PRESENT ( QNG_PG_CURR )  .AND. &
             PRESENT ( QH_PG_CURR ) .AND. PRESENT ( QNH_PG_CURR )  .AND. &
             PRESENT ( RAINNCPG ) .AND. PRESENT ( RAINNCVPG )   .AND. &
             PRESENT ( SNOWNCPG ) .AND. PRESENT ( SNOWNCVPG )   .AND. &
             PRESENT ( HAILNCPG ) .AND. PRESENT ( HAILNCVPG )   .AND. &
             PRESENT ( GRAUPELNCPG ).AND.PRESENT ( GRAUPELNCVPG ).AND. &
             PRESENT (Z      ) .AND. PRESENT ( W      )  ) THEN
!            PRESENT (ccntype)                                 &

         CALL mp_milbrandt2mom_driver(                   &
                     ITIMESTEP=itimestep,                &
                     p8w=p8w,                              &
                     TH=th_pg,                              &
                     QV=qv_pg_curr,                         &
                     QC=qc_pg_curr,                         &
                     QR=qr_pg_curr,                         &
                     QI=qi_pg_curr,                         &
                     QS=qs_pg_curr,                         &
                     QG=qg_pg_curr,                         &
                     QH=qh_pg_curr,                         &
                     NC=qnc_pg_curr,                        &
                     NR=qnr_pg_curr,                        &
                     NI=qni_pg_curr,                        &
                     NS=qns_pg_curr,                        &
                     NG=qng_pg_curr,                        &
                     NH=qnh_pg_curr,                        &
                     PII=pi_phy,                         &
                     P=p,                                &
                     DT_IN=dt,                           &
                     DZ=dz8w,                            &
                     W=w,                                &
                     RAINNC   = RAINNCPG,                  &
                     RAINNCV  = RAINNCVPG,                 &
                     SNOWNC   = SNOWNCPG,                  &
                     SNOWNCV  = SNOWNCVPG,                 &
                     HAILNC   = HAILNCPG,                  &
                     HAILNCV  = HAILNCVPG,                 &
                     GRPLNC   = GRAUPELNCPG,               &
                     GRPLNCV  = GRAUPELNCVPG,              &
                     SR=sr_pg,                              &
!                    ccntype  = ccntype,                 &
                     Zet      = refl_10cm_pg,               & ! HM, 9/22/09 for refl
                  IDS=ids,IDE=ide, JDS=jds,JDE=jde, KDS=kds,KDE=kde, &
                  IMS=ims,IME=ime, JMS=jms,JME=jme, KMS=kms,KME=kme, &
                  ITS=its,ITE=ite, JTS=jts,JTE=jte, KTS=kts,KTE=kte  &
                                                                    )
        ELSE
           Call wrf_error_fatal( 'arguments not present for calling milbrandt2mom piggybacking')
        ENDIF


!     CASE (MILBRANDT3MOM_PG)
!          CALL wrf_debug(100, 'microphysics_driver: calling milbrandt3mom piggybacking')
!          IF (PRESENT ( QV_PG_CURR ) .AND.                          &
!              PRESENT ( QC_PG_CURR ) .AND. PRESENT ( QNC_PG_CURR ) .AND. &
!              PRESENT ( QR_PG_CURR ) .AND. PRESENT ( QNR_PG_CURR ) .AND. PRESENT ( QZR_PG_CURR ) .AND.  &
!              PRESENT ( QI_PG_CURR ) .AND. PRESENT ( QNI_PG_CURR ) .AND. PRESENT ( QZI_PG_CURR ) .AND.  &
!              PRESENT ( QS_PG_CURR ) .AND. PRESENT ( QNS_PG_CURR ) .AND. PRESENT ( QZS_PG_CURR ) .AND.  &
!              PRESENT ( QG_PG_CURR ) .AND. PRESENT ( QNG_PG_CURR ) .AND. PRESENT ( QZG_PG_CURR ) .AND.  &
!              PRESENT ( QH_PG_CURR ) .AND. PRESENT ( QNH_PG_CURR ) .AND. PRESENT ( QZH_PG_CURR ) .AND.  &
!              PRESENT ( RAINNCPG ) .AND. PRESENT ( RAINNCVPG )  .AND. &
!              PRESENT (Z      ) .AND. PRESENT ( W      )  ) THEN
!          CALL mp_milbrandt3mom_driver(                   &
!                      ITIMESTEP=itimestep,                &  !*
!                      TH=th_pg,                              &  !*
!                      QV=qv_pg_curr,                         &  !*
!                      QC=qc_pg_curr,                         &  !*
!                      QR=qr_pg_curr,                         &  !*
!                      QI=qi_pg_curr,                         &  !*
!                      QS=qs_pg_curr,                         &  !*
!                      QG=qg_pg_curr,                         &  !*
!                      QH=qh_pg_curr,                         &  !*
!                      NC=qnc_pg_curr,                        &  !*
!                      NR=qnr_pg_curr,                        &  !*
!                      NI=qni_pg_curr,                        &  !*
!                      NS=qns_pg_curr,                        &  !*
!                      NG=qng_pg_curr,                        &  !*
!                      NH=qnh_pg_curr,                        &  !*
!                      ZR=qzr_pg_curr,                        &  !*
!                      ZI=qzi_pg_curr,                        &  !*
!                      ZS=qzs_pg_curr,                        &  !*
!                      ZG=qzg_pg_curr,                        &  !*
!                      ZH=qzh_pg_curr,                        &  !*
!                      PII=pi_phy,                         &  !*
!                      P=p,                                &  !*
!                      DT_IN=dt,                           &  !*
!                      DZ=dz8w,                            &  !* ! h
!                      W=w                                 &  !*
!                     ,RAINNC=RAINNCPG                       &  !*
!                     ,RAINNCV=RAINNCVPG                     &  !*
!                     ,SR=sr_pg                               &  !* !hm
!                  ,IDS=ids,IDE=ide, JDS=jds,JDE=jde, KDS=kds,KDE=kde &
!                  ,IMS=ims,IME=ime, JMS=jms,JME=jme, KMS=kms,KME=kme &
!                  ,ITS=its,ITE=ite, JTS=jts,JTE=jte, KTS=kts,KTE=kte &
!                                                                     )
!         ELSE
!            Call wrf_error_fatal( 'arguments not present for calling milbrandt3mom piggybacking')
!         ENDIF

#if (EM_CORE==1)
    CASE (NSSL_1MOM_PG)
         CALL wrf_debug(100, 'microphysics_driver: calling nssl1mom piggybacking')
         IF (PRESENT ( QV_PG_CURR ) .AND.                           &
             PRESENT ( QC_PG_CURR ) .AND.  &
             PRESENT ( QR_PG_CURR ) .AND.  &
             PRESENT ( QI_PG_CURR ) .AND.  &
             PRESENT ( QS_PG_CURR ) .AND.  &
             PRESENT ( QG_PG_CURR ) .AND.  &
             PRESENT ( QH_PG_CURR ) .AND.  &
             PRESENT ( RAINNCPG ) .AND. PRESENT ( RAINNCVPG )   .AND. &
             PRESENT ( SNOWNCPG ) .AND. PRESENT ( SNOWNCVPG )   .AND. &
             PRESENT ( HAILNCPG ) .AND. PRESENT ( HAILNCVPG )   .AND. &
             PRESENT ( GRAUPELNCPG ).AND.PRESENT ( GRAUPELNCVPG ).AND. &
             PRESENT (Z      ) .AND. PRESENT ( W      )  .AND. &
             PRESENT ( QVOLG_PG_CURR ) ) THEN
             

         CALL nssl_2mom_driver(                          &
                     ITIMESTEP=itimestep,                &
                     TH=th_pg,                              &
                     QV=qv_pg_curr,                         &
                     QC=qc_pg_curr,                         &
                     QR=qr_pg_curr,                         &
                     QI=qi_pg_curr,                         &
                     QS=qs_pg_curr,                         &
                     QH=qg_pg_curr,                         &
                     QHL=qh_pg_curr,                        &
                     CCW=qnc_pg_curr,                       &
                     CRW=qnr_pg_curr,                       &
                     CCI=qni_pg_curr,                       &
                     CSW=qns_pg_curr,                       &
                     CHW=qng_pg_curr,                       &
                     CHL=qnh_pg_curr,                       &
                     VHW=qvolg_pg_curr,                     &
                     PII=pi_phy,                         &
                     P=p,                                &
                     W=w,                                &
                     DZ=dz8w,                            &
                     DTP=dt,                             &
                     DN=rho,                             &
                     RAINNC   = RAINNCPG,                  &
                     RAINNCV  = RAINNCVPG,                 &
                     SNOWNC   = SNOWNCPG,                  &
                     SNOWNCV  = SNOWNCVPG,                 &
                     HAILNC   = HAILNCPG,                  &
                     HAILNCV  = HAILNCVPG,                 &
                     GRPLNC   = GRAUPELNCPG,               &
                     GRPLNCV  = GRAUPELNCVPG,              &
                     SR=sr_pg,                              &
                     dbz      = refl_10cm_pg,               &
                     diagflag = diagflag,                &
                  IDS=ids,IDE=ide, JDS=jds,JDE=jde, KDS=kds,KDE=kde, &
                  IMS=ims,IME=ime, JMS=jms,JME=jme, KMS=kms,KME=kme, &
                  ITS=its,ITE=ite, JTS=jts,JTE=jte, KTS=kts,KTE=kte  &
                                                                    )
        ELSE
           Call wrf_error_fatal( 'arguments not present for calling nssl_2mom piggybacking')
        ENDIF


    CASE (NSSL_1MOMLFO_PG)
         CALL wrf_debug(100, 'microphysics_driver: calling nssl1mom piggybacking')
         IF (PRESENT ( QV_PG_CURR ) .AND.                           &
             PRESENT ( QC_PG_CURR ) .AND.  &
             PRESENT ( QR_PG_CURR ) .AND.  &
             PRESENT ( QI_PG_CURR ) .AND.  &
             PRESENT ( QS_PG_CURR ) .AND.  &
             PRESENT ( QG_PG_CURR ) .AND.  &
             PRESENT ( RAINNCPG ) .AND. PRESENT ( RAINNCVPG )   .AND. &
             PRESENT ( SNOWNCPG ) .AND. PRESENT ( SNOWNCVPG )   .AND. &
             PRESENT ( GRAUPELNCPG ).AND.PRESENT ( GRAUPELNCVPG ).AND. &
             PRESENT (Z      ) .AND. PRESENT ( W      )  ) THEN
             

         CALL nssl_2mom_driver(                          &
                     ITIMESTEP=itimestep,                &
                     TH=th_pg,                              &
                     QV=qv_pg_curr,                         &
                     QC=qc_pg_curr,                         &
                     QR=qr_pg_curr,                         &
                     QI=qi_pg_curr,                         &
                     QS=qs_pg_curr,                         &
                     QH=qg_pg_curr,                         &
                     PII=pi_phy,                         &
                     P=p,                                &
                     W=w,                                &
                     DZ=dz8w,                            &
                     DTP=dt,                             &
                     DN=rho,                             &
                     RAINNC   = RAINNCPG,                  &
                     RAINNCV  = RAINNCV,                 &
                     SNOWNC   = SNOWNCPG,                  &
                     SNOWNCV  = SNOWNCV,                 &
                     GRPLNC   = GRAUPELNCPG,               &
                     GRPLNCV  = GRAUPELNCVPG,              &
                     SR=sr_pg,                              &
                     dbz      = refl_10cm_pg,               &
                     diagflag = diagflag,                &
                  IDS=ids,IDE=ide, JDS=jds,JDE=jde, KDS=kds,KDE=kde, &
                  IMS=ims,IME=ime, JMS=jms,JME=jme, KMS=kms,KME=kme, &
                  ITS=its,ITE=ite, JTS=jts,JTE=jte, KTS=kts,KTE=kte  &
                                                                    )
        ELSE
           Call wrf_error_fatal( 'arguments not present for calling nssl_2mom piggybacking')
        ENDIF

    CASE (NSSL_2MOM_PG)
         CALL wrf_debug(100, 'microphysics_driver: calling nssl2mom piggybacking')
         IF (PRESENT ( QV_PG_CURR ) .AND.                           &
             PRESENT ( QC_PG_CURR ) .AND. PRESENT ( QNDROP_PG_CURR )  .AND. &
             PRESENT ( QR_PG_CURR ) .AND. PRESENT ( QNR_PG_CURR )  .AND. &
             PRESENT ( QI_PG_CURR ) .AND. PRESENT ( QNI_PG_CURR )  .AND. &
             PRESENT ( QS_PG_CURR ) .AND. PRESENT ( QNS_PG_CURR )  .AND. &
             PRESENT ( QG_PG_CURR ) .AND. PRESENT ( QNG_PG_CURR )  .AND. &
             PRESENT ( QH_PG_CURR ) .AND. PRESENT ( QNH_PG_CURR )  .AND. &
             PRESENT ( RAINNCPG ) .AND. PRESENT ( RAINNCVPG )   .AND. &
             PRESENT ( SNOWNCPG ) .AND. PRESENT ( SNOWNCVPG )   .AND. &
             PRESENT ( HAILNCPG ) .AND. PRESENT ( HAILNCVPG )   .AND. &
             PRESENT ( GRAUPELNCPG ).AND.PRESENT ( GRAUPELNCVPG ).AND.&
             PRESENT (Z      ) .AND. PRESENT ( W      )  .AND.        &
             PRESENT ( QVOLG_PG_CURR ) .AND. ( FX_PG_QVOLG )  .AND.   &
             PRESENT ( QVOLH_PG_CURR ) .AND. ( FX_PG_QVOLH ) ) THEN
             

         CALL nssl_2mom_driver(                          &
                     ITIMESTEP=itimestep,                &
                     TH=th_pg,                              &
                     QV=qv_pg_curr,                         &
                     QC=qc_pg_curr,                         &
                     QR=qr_pg_curr,                         &
                     QI=qi_pg_curr,                         &
                     QS=qs_pg_curr,                         &
                     QH=qg_pg_curr,                         &
                     QHL=qh_pg_curr,                        &
 !                    CCW=qnc_pg_curr,                       &
                     CCW=qndrop_pg_curr,                    &
                     CRW=qnr_pg_curr,                       &
                     CCI=qni_pg_curr,                       &
                     CSW=qns_pg_curr,                       &
                     CHW=qng_pg_curr,                       &
                     CHL=qnh_pg_curr,                       &
                     VHW=qvolg_curr,                     &
                     VHL=qvolh_curr,                     &
                     PII=pi_phy,                         &
                     P=p,                                &
                     W=w,                                &
                     DZ=dz8w,                            &
                     DTP=dt,                             &
                     DN=rho,                             &
                     RAINNC   = RAINNCPG,                  &
                     RAINNCV  = RAINNCV,                 &
                     SNOWNC   = SNOWNCPG,                  &
                     SNOWNCV  = SNOWNCV,                 &
                     HAILNC   = HAILNCPG,                  &
                     HAILNCV  = HAILNCV,                 &
                     GRPLNC   = GRAUPELNCPG,               &
                     GRPLNCV  = GRAUPELNCVPG,              &
                     SR=sr_pg,                              &
                     dbz      = refl_10cm_pg,               &
#if ( WRF_CHEM == 1 )
                    EVAPPROD=evapprod,RAINPROD=rainprod, &
#endif
                     nssl_progn=nssl_progn,              &
                     diagflag = diagflag,                &
                     re_cloud=re_cloud,                  &
                     re_ice=re_ice,                      &
                     re_snow=re_snow,                    &
                     has_reqc=has_reqc,                  & ! ala G. Thompson
                     has_reqi=has_reqi,                  & ! ala G. Thompson
                     has_reqs=has_reqs,                  & ! ala G. Thompson
                  IDS=ids,IDE=ide, JDS=jds,JDE=jde, KDS=kds,KDE=kde, &
                  IMS=ims,IME=ime, JMS=jms,JME=jme, KMS=kms,KME=kme, &
                  ITS=its,ITE=ite, JTS=jts,JTE=jte, KTS=kts,KTE=kte  &
                                                                    )

        ELSE
           Call wrf_error_fatal( 'arguments not present for calling nssl_2mom piggybacking')
        ENDIF

    CASE (NSSL_2MOMG_PG)
         CALL wrf_debug(100, 'microphysics_driver: calling nssl2mom piggybacking')
         IF (PRESENT ( QV_PG_CURR ) .AND.                           &
             PRESENT ( QC_PG_CURR ) .AND. PRESENT ( QNDROP_PG_CURR )  .AND. &
             PRESENT ( QR_PG_CURR ) .AND. PRESENT ( QNR_PG_CURR )  .AND. &
             PRESENT ( QI_PG_CURR ) .AND. PRESENT ( QNI_PG_CURR )  .AND. &
             PRESENT ( QS_PG_CURR ) .AND. PRESENT ( QNS_PG_CURR )  .AND. &
             PRESENT ( QG_PG_CURR ) .AND. PRESENT ( QNG_PG_CURR )  .AND. &
             PRESENT ( RAINNCPG ) .AND. PRESENT ( RAINNCVPG )   .AND. &
             PRESENT ( SNOWNCPG ) .AND. PRESENT ( SNOWNCVPG )   .AND. &
             PRESENT ( HAILNCPG ) .AND. PRESENT ( HAILNCVPG )   .AND. &
             PRESENT ( GRAUPELNCPG ).AND.PRESENT ( GRAUPELNCVPG ).AND. &
             PRESENT (Z      ) .AND. PRESENT ( W      )  .AND. &
             PRESENT ( QVOLG_PG_CURR ) .AND. ( FX_PG_QVOLG )  ) THEN
             

         CALL nssl_2mom_driver(                          &
                     ITIMESTEP=itimestep,                &
                     TH=th_pg,                              &
                     QV=qv_pg_curr,                         &
                     QC=qc_pg_curr,                         &
                     QR=qr_pg_curr,                         &
                     QI=qi_pg_curr,                         &
                     QS=qs_pg_curr,                         &
                     QH=qg_pg_curr,                         &
 !                    CCW=qnc_pg_curr,                       &
                     CCW=qndrop_pg_curr,                    &
                     CRW=qnr_pg_curr,                       &
                     CCI=qni_pg_curr,                       &
                     CSW=qns_pg_curr,                       &
                     CHW=qng_pg_curr,                       &
                     VHW=qvolg_pg_curr,                     &
                     PII=pi_phy,                         &
                     P=p,                                &
                     W=w,                                &
                     DZ=dz8w,                            &
                     DTP=dt,                             &
                     DN=rho,                             &
                     RAINNC   = RAINNCPG,                  &
                     RAINNCV  = RAINNCVPG,                 &
                     SNOWNC   = SNOWNCPG,                  &
                     SNOWNCV  = SNOWNCVPG,                 &
                     HAILNC   = HAILNCPG,                  &
                     HAILNCV  = HAILNCVPG,                 &
                     GRPLNC   = GRAUPELNCPG,               &
                     GRPLNCV  = GRAUPELNCVPG,              &
                     SR=sr_pg,                              &
                     dbz      = refl_10cm_pg,               &
#if ( WRF_CHEM == 1 )
                    EVAPPROD=evapprod,RAINPROD=rainprod, &
#endif
                     nssl_progn=nssl_progn,              &
                      diagflag = diagflag,               &
                     re_cloud=re_cloud,                  &
                     re_ice=re_ice,                      &
                     re_snow=re_snow,                    &
                     has_reqc=has_reqc,                  & ! ala G. Thompson
                     has_reqi=has_reqi,                  & ! ala G. Thompson
                     has_reqs=has_reqs,                  & ! ala G. Thompson
                  IDS=ids,IDE=ide, JDS=jds,JDE=jde, KDS=kds,KDE=kde, &
                  IMS=ims,IME=ime, JMS=jms,JME=jme, KMS=kms,KME=kme, &
                  ITS=its,ITE=ite, JTS=jts,JTE=jte, KTS=kts,KTE=kte  &
                                                                    )

        ELSE
           Call wrf_error_fatal( 'arguments not present for calling nssl_2mom piggybacking')
        ENDIF

    CASE (NSSL_2MOMCCN_PG)
         CALL wrf_debug(100, 'microphysics_driver: calling nssl_2momccn piggybacking')
         IF (PRESENT ( QV_PG_CURR ) .AND.                           &
             PRESENT ( QC_PG_CURR ) .AND. PRESENT (QNDROP_CURR)  .AND. &
             PRESENT ( QR_PG_CURR ) .AND. PRESENT ( QNR_PG_CURR )  .AND. &
             PRESENT ( QI_PG_CURR ) .AND. PRESENT ( QNI_PG_CURR )  .AND. &
             PRESENT ( QS_PG_CURR ) .AND. PRESENT ( QNS_PG_CURR )  .AND. &
             PRESENT ( QG_PG_CURR ) .AND. PRESENT ( QNG_PG_CURR )  .AND. &
             PRESENT ( QH_PG_CURR ) .AND. PRESENT ( QNH_PG_CURR )  .AND. &
             PRESENT ( RAINNCPG ) .AND. PRESENT ( RAINNCVPG )   .AND. &
             PRESENT ( SNOWNCPG ) .AND. PRESENT ( SNOWNCVPG )   .AND. &
             PRESENT ( HAILNCPG ) .AND. PRESENT ( HAILNCVPG )   .AND. &
             PRESENT ( GRAUPELNCPG ).AND.PRESENT ( GRAUPELNCVPG ).AND. &
             PRESENT (Z      ) .AND. PRESENT ( W      )  .AND. &
             PRESENT ( QVOLG_PG_CURR ) .AND. ( FX_PG_QVOLG ) .AND.         &
             PRESENT ( QVOLH_PG_CURR ) .AND. ( FX_PG_QVOLH ) .AND.         &
             PRESENT( QNN_PG_CURR )                          ) THEN
             

         CALL nssl_2mom_driver(                          &
                     ITIMESTEP=itimestep,                &
                     TH=th_pg,                              &
                     QV=qv_pg_curr,                         &
                     QC=qc_pg_curr,                         &
                     QR=qr_pg_curr,                         &
                     QI=qi_pg_curr,                         &
                     QS=qs_pg_curr,                         &
                     QH=qg_pg_curr,                         &
                     QHL=qh_pg_curr,                        &
!                     CCW=qnc_pg_curr,                       &
                     CCW=qndrop_pg_curr,                    &
                     CRW=qnr_pg_curr,                       &
                     CCI=qni_pg_curr,                       &
                     CSW=qns_pg_curr,                       &
                     CHW=qng_pg_curr,                       &
                     CHL=qnh_pg_curr,                       &
                     VHW=qvolg_pg_curr,                     &
                     VHL=qvolh_pg_curr,                     &
                     cn=qnn_pg_curr,                        &
                     PII=pi_phy,                         &
                     P=p,                                &
                     W=w,                                &
                     DZ=dz8w,                            &
                     DTP=dt,                             &
                     DN=rho,                             &
                     RAINNC   = RAINNCPG,                  &
                     RAINNCV  = RAINNCVPG,                 &
                     SNOWNC   = SNOWNCPG,                  &
                     SNOWNCV  = SNOWNCVPG,                 &
                     HAILNC   = HAILNCPG,                  &
                     HAILNCV  = HAILNCVPG,                 &
                     GRPLNC   = GRAUPELNCPG,               &
                     GRPLNCV  = GRAUPELNCVPG,              &
                     SR=sr_pg,                              &
                     dbz      = refl_10cm_pg,               &
#if ( WRF_CHEM == 1 )
                     EVAPPROD=evapprod,RAINPROD=rainprod,&
#endif
                     nssl_progn=nssl_progn,              &
                     diagflag = diagflag,                &
                     re_cloud=re_cloud,                  &
                     re_ice=re_ice,                      &
                     re_snow=re_snow,                    &
                     has_reqc=has_reqc,                  & ! ala G. Thompson
                     has_reqi=has_reqi,                  & ! ala G. Thompson
                     has_reqs=has_reqs,                  & ! ala G. Thompson
                  IDS=ids,IDE=ide, JDS=jds,JDE=jde, KDS=kds,KDE=kde, &
                  IMS=ims,IME=ime, JMS=jms,JME=jme, KMS=kms,KME=kme, &
                  ITS=its,ITE=ite, JTS=jts,JTE=jte, KTS=kts,KTE=kte  &
                                                                    )
        ELSE
           Call wrf_error_fatal( 'arguments not present for calling nssl_2momccn piggybacking')
        ENDIF
#endif
!
        CASE (GSFCGCESCHEME_PG)
             CALL wrf_debug ( 100 , 'microphysics_driver: calling GSFCGCE piggybacking' )
             IF ( PRESENT( QV_PG_CURR ) .AND. PRESENT ( QC_PG_CURR ) .AND.  &
                  PRESENT( QR_PG_CURR ) .AND. PRESENT ( QI_PG_CURR ) .AND.  &
                  PRESENT( QS_PG_CURR )                           .AND.  &
                  PRESENT( RAINNCPG ) .AND. PRESENT ( RAINNCVPG ) .AND.  &
                  PRESENT( HAIL    ) .AND. PRESENT ( ICE2    ) .AND.  &
                  PRESENT( Z       ) .AND. PRESENT ( W       )  ) THEN
               CALL gsfcgce(                                        &
                  TH=th_pg                                             &
                 ,QV=qv_pg_curr                                        &
                 ,QL=qc_pg_curr                                        &
                 ,QR=qr_pg_curr                                        &
                 ,QI=qi_pg_curr                                        &
                 ,QS=qs_pg_curr                                        &
                 ,RHO=rho, PII=pi_phy, P=p, DT_IN=dt, Z=z           &
                 ,HT=ht, DZ8W=dz8w, GRAV=G                          &
                 ,RHOWATER=rhowater, RHOSNOW=rhosnow                &
                 ,ITIMESTEP=itimestep                               &
                 ,IDS=ids,IDE=ide, JDS=jds,JDE=jde, KDS=kds,KDE=kde &
                 ,IMS=ims,IME=ime, JMS=jms,JME=jme, KMS=kms,KME=kme &
                 ,ITS=its,ITE=ite, JTS=jts,JTE=jte, KTS=kts,KTE=kte &
                 ,RAINNC=RAINNCPG, RAINNCV=RAINNCVPG                    &
                 ,SNOWNC=SNOWNCPG, SNOWNCV=SNOWNCVPG ,SR=sr_pg             &
                 ,GRAUPELNC=GRAUPELNCPG ,GRAUPELNCV=GRAUPELNCVPG        &
                 ,REFL_10CM=refl_10cm_pg                               &  ! added for radar reflectivity
                 ,diagflag=diagflag                                 &  ! added for radar reflectivity
                 ,do_radar_ref=do_radar_ref                         &  ! added for radar reflectivity
                 ,F_QG=fx_pg_qg                                         &
                 ,QG=qg_pg_curr                                        &
                 ,IHAIL=hail, ICE2=ice2                             &
                                                                    )
! HAIL = 1,  run gsfcgce with hail option
!        0,  run gsfcgce with graupel option   <---- default
!        note: no effect if ice2 = 1
! ICE2 = 1,  run gsfcgce with only snow, ice
!        2,  run gsfcgce with only graupel, ice
!        0,  run gsfcgce with snow, ice and hail/graupel   <---- default

             ELSE
                CALL wrf_error_fatal ( 'arguments not present for calling GSFCGCE piggybacking' )
             ENDIF

        CASE (LINSCHEME_PG)
             CALL wrf_debug ( 100 , 'microphysics_driver: calling lin_et_al piggybacking' )
             IF ( PRESENT( QV_PG_CURR ) .AND. PRESENT ( QC_PG_CURR ) .AND.  &
                  PRESENT( QR_PG_CURR ) .AND. PRESENT ( QI_PG_CURR ) .AND.  &
                  PRESENT( QS_PG_CURR )                           .AND.  &
                  PRESENT( RAINNCPG ) .AND. PRESENT ( RAINNCVPG ) .AND.  &
                  PRESENT( Z       ) ) THEN
               CALL lin_et_al(                                      &
                  TH=th_pg                                             &
                 ,QV=qv_pg_curr                                        &
                 ,QL=qc_pg_curr                                        &
                 ,QR=qr_pg_curr                                        &
                 ,QI=qi_pg_curr                                        &
                 ,QS=qs_pg_curr                                        &
                 ,QLSINK=qlsink                                     &
                 ,RHO=rho, PII=pi_phy, P=p, DT_IN=dt, Z=z           &
                 ,HT=ht, DZ8W=dz8w, GRAV=G,  CP=cp                  &
                 ,RAIR=r_d, RVAPOR=R_v                              &
                 ,XLS=xls, XLV=xlv, XLF=xlf                         &
                 ,RHOWATER=rhowater, RHOSNOW=rhosnow                &
                 ,EP2=ep_2,SVP1=svp1,SVP2=svp2                      &
                 ,SVP3=svp3,SVPT0=svpt0                             &
                 ,RAINNC=RAINNCPG, RAINNCV=RAINNCVPG                    &
                 ,SNOWNC=SNOWNCPG, SNOWNCV=SNOWNCVPG                    &
                 ,GRAUPELNC=GRAUPELNCPG, GRAUPELNCV=GRAUPELNCVPG, SR=sr_pg &
                 ,REFL_10CM=refl_10cm_pg                               &  ! added for radar reflectivity
                 ,diagflag=diagflag                                 &  ! added for radar reflectivity
                 ,do_radar_ref=do_radar_ref                         &  ! added for radar reflectivity
                 ,IDS=ids,IDE=ide, JDS=jds,JDE=jde, KDS=kds,KDE=kde &
                 ,IMS=ims,IME=ime, JMS=jms,JME=jme, KMS=kms,KME=kme &
                 ,ITS=its,ITE=ite, JTS=jts,JTE=jte, KTS=kts,KTE=kte &
                 ,PRECR=precr,PRECI=preci,PRECS=precs,PRECG=precg   &
                 ,F_QG=FX_PG_qg, F_QNDROP=FX_PG_qndrop                      &
                 ,QG=qg_pg_curr                                        &
                 ,QNDROP=qndrop_pg_curr                                &
                                                                    )
             ELSE
                CALL wrf_error_fatal ( 'arguments not present for calling lin_et_al piggybacking' )
             ENDIF

       CASE (SBU_YLINSCHEME_PG)
             CALL wrf_debug ( 100 , 'microphysics_driver: calling sbu_ylin piggybacking' )
             IF ( PRESENT( QV_PG_CURR ) .AND. PRESENT ( QC_PG_CURR ) .AND.  &
                  PRESENT( QR_PG_CURR ) .AND. PRESENT ( QI_PG_CURR ) .AND.  &
                  PRESENT( QS_PG_CURR )                           .AND.  &
                  PRESENT( RI_CURR )                           .AND.  &
                  PRESENT( RAINNCPG ) .AND. PRESENT ( RAINNCVPG ) .AND.  &
                  PRESENT( Z       ) ) THEN
               CALL sbu_ylin(                                       &
                  TH=th_pg                                             &
                 ,QV=qv_pg_curr                                        &
                 ,QL=qc_pg_curr                                        &
                 ,QR=qr_pg_curr                                        &
                 ,QI=qi_pg_curr                                        &
                 ,QS=qs_pg_curr                                        &
                 ,RI3D=ri_curr                                      &
!                 ,QLSINK=qlsink                                     &
                 ,RHO=rho, PII=pi_phy, P=p, DT_IN=dt, Z=z           &
                 ,HT=ht, DZ8W=dz8w                                  &
!                 , GRAV=G,  CP=cp                  &
!                 ,RAIR=r_d, RVAPOR=R_v                              &
!                 ,XLS=xls, XLV=xlv, XLF=xlf                         &
!                 ,RHOWATER=rhowater, RHOSNOW=rhosnow                &
!                 ,EP2=ep_2,SVP1=svp1,SVP2=svp2                      &
!                 ,SVP3=svp3,SVPT0=svpt0                             &
                 ,RAINNC=RAINNCPG, RAINNCV=RAINNCVPG                    &
!                 ,SNOWNC=SNOWNCPG, SNOWNCV=SNOWNCVPG                    &
!                 ,GRAUPELNC=GRAUPELNCPG, GRAUPELNCV=GRAUPELNCVPG, SR=sr_pg &
                 ,IDS=ids,IDE=ide, JDS=jds,JDE=jde, KDS=kds,KDE=kde &
                 ,IMS=ims,IME=ime, JMS=jms,JME=jme, KMS=kms,KME=kme &
                 ,ITS=its,ITE=ite, JTS=jts,JTE=jte, KTS=kts,KTE=kte &
!                 ,PRECR=precr,PRECI=preci,PRECS=precs,PRECG=precg   &
!                 ,F_QG=fx_pg_qg                                         &
!                 ,F_QNDROP=fx_pg_qndrop                      &
!                 ,QG=qg_pg_curr                                        &
!                 ,QNDROP=qndrop_pg_curr                                &
                                                                     )
             ELSE
                CALL wrf_error_fatal ( 'arguments not present for calling sbu_ylin piggybacking' )
             ENDIF


        CASE (WSM3SCHEME_PG)
             CALL wrf_debug ( 100 , 'microphysics_driver: calling wsm3 piggybacking' )
             IF ( PRESENT( QV_PG_CURR ) .AND. PRESENT ( QC_PG_CURR ) .AND.  &
                  PRESENT( QR_PG_CURR ) .AND.                            &
                  PRESENT( RAINNCPG ) .AND. PRESENT ( RAINNCVPG ) .AND.  &
                  PRESENT( W       )                            ) THEN
             CALL wsm3(                                             &
                  TH=th_pg                                             &
                 ,Q=qv_pg_curr                                         &
                 ,QCI=qc_pg_curr                                       &
                 ,QRS=qr_pg_curr                                       &
                 ,W=w,DEN=rho,PII=pi_phy,P=p,DELZ=dz8w              &
                 ,DELT=dt,G=g,CPD=cp,CPV=cpv                        &
                 ,RD=r_d,RV=r_v,T0C=svpt0                           &
                 ,EP1=ep_1, EP2=ep_2, QMIN=epsilon                  &
                 ,XLS=xls, XLV0=xlv, XLF0=xlf                       &
                 ,DEN0=rhoair0, DENR=rhowater                       &
                 ,CLIQ=cliq,CICE=cice,PSAT=psat                     &
                 ,RAIN=RAINNCPG ,RAINNCV=RAINNCVPG                      &
                 ,SNOW=SNOWNCPG ,SNOWNCV=SNOWNCVPG                      &
                 ,SR=sr_pg                                             &
# ifndef _ACCEL
                 ,has_reqc=has_reqc                                 &  ! for radiation +
                 ,has_reqi=has_reqi                                 &
                 ,has_reqs=has_reqs                                 &
                 ,re_cloud=re_cloud                                 &
                 ,re_ice=re_ice                                     &
                 ,re_snow=re_snow                                   &  ! for radiation -  
# endif
                 ,IDS=ids,IDE=ide, JDS=jds,JDE=jde, KDS=kds,KDE=kde &
                 ,IMS=ims,IME=ime, JMS=jms,JME=jme, KMS=kms,KME=kme &
                 ,ITS=its,ITE=ite, JTS=jts,JTE=jte, KTS=kts,KTE=kte &
                                                                    )
             ELSE
                CALL wrf_error_fatal ( 'arguments not present for calling wsm3 piggybacking' )
             ENDIF

#ifndef XEON_OPTIMIZED_WSM5
        CASE (WSM5SCHEME_PG)
             CALL wrf_debug ( 100 , 'microphysics_driver: calling wsm5 piggybacking' )
             IF ( PRESENT( QV_PG_CURR ) .AND. PRESENT ( QC_PG_CURR ) .AND.  &
                  PRESENT( QR_PG_CURR ) .AND. PRESENT ( QI_PG_CURR ) .AND.  &
                  PRESENT( QS_PG_CURR ) .AND.                            &
                  PRESENT( RAINNCPG ) .AND. PRESENT ( RAINNCVPG )  ) THEN
             CALL wsm5(                                             &
                  TH=th_pg                                             &
                 ,Q=qv_pg_curr                                         &
                 ,QC=qc_pg_curr                                        &
                 ,QR=qr_pg_curr                                        &
                 ,QI=qi_pg_curr                                        &
                 ,QS=qs_pg_curr                                        &
                 ,DEN=rho,PII=pi_phy,P=p,DELZ=dz8w                  &
                 ,DELT=dt,G=g,CPD=cp,CPV=cpv                        &
                 ,RD=r_d,RV=r_v,T0C=svpt0                           &
                 ,EP1=ep_1, EP2=ep_2, QMIN=epsilon                  &
                 ,XLS=xls, XLV0=xlv, XLF0=xlf                       &
                 ,DEN0=rhoair0, DENR=rhowater                       &
                 ,CLIQ=cliq,CICE=cice,PSAT=psat                     &
                 ,RAIN=RAINNCPG ,RAINNCV=RAINNCVPG                      &
                 ,SNOW=SNOWNCPG ,SNOWNCV=SNOWNCVPG                      &
                 ,SR=sr_pg                                             &
# ifndef _ACCEL
                 ,REFL_10CM=refl_10cm_pg                               &  ! added for radar reflectivity
                 ,diagflag=diagflag                                 &  ! added for radar reflectivity
                 ,do_radar_ref=do_radar_ref                         &  ! added for radar reflectivity
                 ,has_reqc=has_reqc                                 &  ! for radiation +
                 ,has_reqi=has_reqi                                 &
                 ,has_reqs=has_reqs                                 &
                 ,re_cloud=re_cloud                                 &
                 ,re_ice=re_ice                                     &
                 ,re_snow=re_snow                                   &  ! for radiation -  
# endif
                 ,IDS=ids,IDE=ide, JDS=jds,JDE=jde, KDS=kds,KDE=kde &
                 ,IMS=ims,IME=ime, JMS=jms,JME=jme, KMS=kms,KME=kme &
                 ,ITS=its,ITE=ite, JTS=jts,JTE=jte, KTS=kts,KTE=kte &
                                                                    )
             ELSE
                CALL wrf_error_fatal ( 'arguments not present for calling wsm5 piggybacking' )
             ENDIF
#endif

        CASE (WSM6SCHEME_PG)
             CALL wrf_debug ( 100 , 'microphysics_driver: calling wsm6 piggybacking' )
             IF ( PRESENT( QV_PG_CURR ) .AND. PRESENT ( QC_PG_CURR ) .AND.  &
                  PRESENT( QR_PG_CURR ) .AND. PRESENT ( QI_PG_CURR ) .AND.  &
                  PRESENT( QS_PG_CURR ) .AND. PRESENT ( QG_PG_CURR ) .AND.  &
                  PRESENT( RAINNCPG ) .AND. PRESENT ( RAINNCVPG )  ) THEN
             CALL wsm6(                                             &
                  TH=th_pg                                             &
                 ,Q=qv_pg_curr                                         &
                 ,QC=qc_pg_curr                                        &
                 ,QR=qr_pg_curr                                        &
                 ,QI=qi_pg_curr                                        &
                 ,QS=qs_pg_curr                                        &
                 ,QG=qg_pg_curr                                        &
                 ,DEN=rho,PII=pi_phy,P=p,DELZ=dz8w                  &
                 ,DELT=dt,G=g,CPD=cp,CPV=cpv                        &
                 ,RD=r_d,RV=r_v,T0C=svpt0                           &
                 ,EP1=ep_1, EP2=ep_2, QMIN=epsilon                  &
                 ,XLS=xls, XLV0=xlv, XLF0=xlf                       &
                 ,DEN0=rhoair0, DENR=rhowater                       &
                 ,CLIQ=cliq,CICE=cice,PSAT=psat                     &
                 ,RAIN=RAINNCPG ,RAINNCV=RAINNCVPG                      &
                 ,SNOW=SNOWNCPG ,SNOWNCV=SNOWNCVPG                      &
                 ,SR=sr_pg                                             &
                 ,REFL_10CM=refl_10cm_pg                               &  ! added for radar reflectivity
                 ,diagflag=diagflag                                 &  ! added for radar reflectivity
                 ,do_radar_ref=do_radar_ref                         &  ! added for radar reflectivity
                 ,GRAUPEL=GRAUPELNCPG ,GRAUPELNCV=GRAUPELNCVPG          &
                 ,has_reqc=has_reqc                                 &  ! for radiation +
                 ,has_reqi=has_reqi                                 &
                 ,has_reqs=has_reqs                                 &
                 ,re_cloud=re_cloud                                 &
                 ,re_ice=re_ice                                     &
                 ,re_snow=re_snow                                   &  ! for radiation -  
                 ,IDS=ids,IDE=ide, JDS=jds,JDE=jde, KDS=kds,KDE=kde &
                 ,IMS=ims,IME=ime, JMS=jms,JME=jme, KMS=kms,KME=kme &
                 ,ITS=its,ITE=ite, JTS=jts,JTE=jte, KTS=kts,KTE=kte &
                                                                    )
             ELSE
                CALL wrf_error_fatal ( 'arguments not present for calling wsm6 piggybacking' )
             ENDIF

        CASE (WDM5SCHEME_PG)
             CALL wrf_debug ( 100 , 'microphysics_driver: calling wdm5 piggybacking' )
             IF ( PRESENT( QV_PG_CURR ) .AND. PRESENT ( QC_PG_CURR ) .AND.  &
                  PRESENT( QR_PG_CURR ) .AND. PRESENT ( QI_PG_CURR ) .AND.  &
                  PRESENT( QS_PG_CURR ) .AND. PRESENT( QNN_PG_CURR ) .AND.  &
                  PRESENT ( QNC_PG_CURR ) .AND. PRESENT( QNR_PG_CURR ).AND.  &
                  PRESENT( RAINNCPG ) .AND. PRESENT ( RAINNCVPG )  ) THEN
             CALL wdm5(                                             &
                  TH=th_pg                                             &
                 ,Q=qv_pg_curr                                         &
                 ,QC=qc_pg_curr                                        &
                 ,QR=qr_pg_curr                                        &
                 ,QI=qi_pg_curr                                        &
                 ,QS=qs_pg_curr                                        &
                 ,NN=qnn_pg_curr                                       &
                 ,NC=qnc_pg_curr                                       &
                 ,NR=qnr_pg_curr                                       &
                 ,DEN=rho,PII=pi_phy,P=p,DELZ=dz8w                  &
                 ,DELT=dt,G=g,CPD=cp,CPV=cpv,CCN0=ccn_conc          & ! RAS
                 ,RD=r_d,RV=r_v,T0C=svpt0                           &
                 ,EP1=ep_1, EP2=ep_2, QMIN=epsilon                  &
                 ,XLS=xls, XLV0=xlv, XLF0=xlf                       &
                 ,DEN0=rhoair0, DENR=rhowater                       &
                 ,CLIQ=cliq,CICE=cice,PSAT=psat                     &
                 ,RAIN=RAINNCPG ,RAINNCV=RAINNCVPG                      &
                 ,SNOW=SNOWNCPG ,SNOWNCV=SNOWNCVPG                      &
                 ,SR=sr_pg                                             &
                 ,REFL_10CM=refl_10cm_pg                               &  ! added for radar reflectivity
                 ,diagflag=diagflag                                 &  ! added for radar reflectivity
                 ,do_radar_ref=do_radar_ref                         &  ! added for radar reflectivity
                 ,has_reqc=has_reqc                                 &  ! for radiation +
                 ,has_reqi=has_reqi                                 &
                 ,has_reqs=has_reqs                                 &
                 ,re_cloud=re_cloud                                 &
                 ,re_ice=re_ice                                     &
                 ,re_snow=re_snow                                   &  ! for radiation -       
                 ,ITIMESTEP=itimestep                               & 
                 ,IDS=ids,IDE=ide, JDS=jds,JDE=jde, KDS=kds,KDE=kde &
                 ,IMS=ims,IME=ime, JMS=jms,JME=jme, KMS=kms,KME=kme &
                 ,ITS=its,ITE=ite, JTS=jts,JTE=jte, KTS=kts,KTE=kte &
                                                                    )
             ELSE
                CALL wrf_error_fatal ( 'arguments not present for calling wdm5 piggybacking')
             ENDIF

       CASE (WDM6SCHEME_PG)
             CALL wrf_debug ( 100 , 'microphysics_driver: calling wdm6 piggybacking' )
             IF ( PRESENT( QV_PG_CURR ) .AND. PRESENT ( QC_PG_CURR ) .AND.  &
                  PRESENT( QR_PG_CURR ) .AND. PRESENT ( QI_PG_CURR ) .AND.  &
                  PRESENT( QS_PG_CURR ) .AND. PRESENT ( QG_PG_CURR ) .AND.  &
                  PRESENT( QNN_PG_CURR ) .AND. PRESENT ( QNC_PG_CURR ) .AND. &
                  PRESENT( QNR_PG_CURR ).AND.                            &
                 PRESENT( RAINNCPG ) .AND. PRESENT ( RAINNCVPG )  ) THEN
             CALL wdm6(                                             &
                  TH=th_pg                                             &
                 ,Q=qv_pg_curr                                         &
                 ,QC=qc_pg_curr                                        &
                 ,QR=qr_pg_curr                                        &
                 ,QI=qi_pg_curr                                        &
                 ,QS=qs_pg_curr                                        &
                 ,QG=qg_pg_curr                                        &
                 ,NN=qnn_pg_curr                                       &
                 ,NC=qnc_pg_curr                                       &
                 ,NR=qnr_pg_curr                                       &
                 ,DEN=rho,PII=pi_phy,P=p,DELZ=dz8w                  &
                 ,DELT=dt,G=g,CPD=cp,CPV=cpv,CCN0=ccn_conc          & ! RAS
                 ,RD=r_d,RV=r_v,T0C=svpt0                           &
                 ,EP1=ep_1, EP2=ep_2, QMIN=epsilon                  &
                 ,XLS=xls, XLV0=xlv, XLF0=xlf                       &
                 ,DEN0=rhoair0, DENR=rhowater                       &
                 ,CLIQ=cliq,CICE=cice,PSAT=psat                     &
                 ,RAIN=RAINNCPG ,RAINNCV=RAINNCVPG                      &
                 ,SNOW=SNOWNCPG ,SNOWNCV=SNOWNCVPG                      &
                 ,SR=sr_pg                                             &
                 ,REFL_10CM=refl_10cm_pg                               &  ! added for radar reflectivity
                 ,diagflag=diagflag                                 &  ! added for radar reflectivity
                 ,do_radar_ref=do_radar_ref                         &  ! added for radar reflectivity
                 ,GRAUPEL=GRAUPELNCPG ,GRAUPELNCV=GRAUPELNCVPG          &
                 ,ITIMESTEP=itimestep                               & 
                 ,has_reqc=has_reqc                                 &  ! for radiation +
                 ,has_reqi=has_reqi                                 &
                 ,has_reqs=has_reqs                                 &
                 ,re_cloud=re_cloud                                 &
                 ,re_ice=re_ice                                     & 
                 ,re_snow=re_snow                                   &  ! for radiation -  
                 ,IDS=ids,IDE=ide, JDS=jds,JDE=jde, KDS=kds,KDE=kde &
                 ,IMS=ims,IME=ime, JMS=jms,JME=jme, KMS=kms,KME=kme &
                 ,ITS=its,ITE=ite, JTS=jts,JTE=jte, KTS=kts,KTE=kte &
                                                                    )
             ELSE
               CALL wrf_error_fatal ( 'arguments not present for calling wdm6 piggybacking')
             ENDIF
#if(NMM_CORE==1)
        CASE (ETAMP_HWRF_PG)
             CALL wrf_debug ( 100 , 'microphysics_driver: calling etampnew_HWRF piggybacking')

             IF ( PRESENT( QV_PG_CURR ) .AND. PRESENT( qt_pg_curr ) .AND. &
                  PRESENT( RAINNCPG ) .AND. PRESENT ( RAINNCVPG ) .AND.  &
                  PRESENT( mp_restart_state )                  .AND. &
                  PRESENT( tbpvs_state )                      .AND. &
                  PRESENT( tbpvs0_state )                       ) THEN

               CALL ETAMP_NEW_HWRF(                                      &
                  ITIMESTEP=itimestep,DT=dt,DX=dx,DY=dy, GID=id &
                 ,RAINNC=RAINNCPG,RAINNCV=RAINNCVPG                     &
                 ,DZ8W=dz8w,RHO_PHY=rho,P_PHY=p,PI_PHY=pi_phy,TH_PHY=th_pg &
                 ,QV=qv_pg_curr                                        &
                 ,QT=qt_pg_curr                                        &
                 ,LOWLYR=LOWLYR,SR=sr_pg                               &
                 ,F_ICE_PHY=F_ICE_PHY,F_RAIN_PHY=F_RAIN_PHY         &
                 ,F_RIMEF_PHY=F_RIMEF_PHY                           &
                 ,QC=qc_pg_curr,QR=qr_pg_curr,QI=qi_pg_curr                  &
                 ,IDS=ids,IDE=ide, JDS=jds,JDE=jde, KDS=kds,KDE=kde &
                 ,IMS=ims,IME=ime, JMS=jms,JME=jme, KMS=kms,KME=kme &
                 ,ITS=its,ITE=ite, JTS=jts,JTE=jte, KTS=kts,KTE=kte &
                                                                    )
             ELSE
                CALL wrf_error_fatal ( 'arguments not present for calling etampnew piggybacking' )
             ENDIF
#endif
        CASE (ETAMPNEW_PG)    !-- Operational 4-km High-Resolution Window (HRW) version
             CALL wrf_debug ( 100 , 'microphysics_driver: calling etampnew piggybacking')

             IF ( PRESENT( QV_PG_CURR ) .AND. PRESENT( qt_pg_curr ) .AND. &
                  PRESENT( RAINNCPG ) .AND. PRESENT ( RAINNCVPG ) .AND.  &
                  PRESENT( mp_restart_state )                  .AND. &
                  PRESENT( tbpvs_state )                      .AND. &
                  PRESENT( tbpvs0_state )                       ) THEN
               CALL ETAMP_NEW(                                      &
                  ITIMESTEP=itimestep,DT=dt,DX=dx,DY=dy             &
                 ,DZ8W=dz8w,RHO_PHY=rho,P_PHY=p,PI_PHY=pi_phy,TH_PHY=th_pg &
                 ,QV=qv_pg_curr                                        &
                 ,QC=qc_pg_curr                                        &
                 ,QS=qs_pg_curr                                        &
                 ,QR=qr_pg_curr                                        &
                 ,QT=qt_pg_curr                                        &
                 ,LOWLYR=LOWLYR,SR=sr_pg                               &
                 ,F_ICE_PHY=F_ICE_PHY,F_RAIN_PHY=F_RAIN_PHY         &
                 ,F_RIMEF_PHY=F_RIMEF_PHY                           &
                 ,RAINNC=RAINNCPG,RAINNCV=RAINNCVPG                     &
                 ,IDS=ids,IDE=ide, JDS=jds,JDE=jde, KDS=kds,KDE=kde &
                 ,IMS=ims,IME=ime, JMS=jms,JME=jme, KMS=kms,KME=kme &
                 ,ITS=its,ITE=ite, JTS=jts,JTE=jte, KTS=kts,KTE=kte &
                 ,MP_RESTART_STATE=mp_restart_state                 &
                 ,TBPVS_STATE=tbpvs_state,TBPVS0_STATE=tbpvs0_state &
                                                                    )
             ELSE
                CALL wrf_error_fatal ( 'arguments not present for calling etampnew piggybacking' )
             ENDIF
#if(EM_CORE==1)
          CASE (CAMMGMPSCHEME_PG)
             CALL wrf_debug ( 100 , 'microphysics_driver: calling CAMMGMPSCHEME piggybacking')
             IF ( PRESENT( z          ) .AND. PRESENT( ht          ) .AND. &
                  PRESENT( qs_pg_curr    ) .AND.                              &
                  PRESENT( qv_pg_curr    ) .AND. PRESENT( qc_pg_curr     ) .AND. &
                  PRESENT( qi_pg_curr    ) .AND. PRESENT( fx_pg_qc        ) .AND. &
                  PRESENT( qr_pg_curr    ) .AND. PRESENT( qndrop_curr ) .AND. &                  
                  PRESENT( fx_pg_qi       ) .AND. PRESENT( qnc_pg_curr    ) .AND. &
                  PRESENT( RAINNCVPG ) .AND. PRESENT( SNOWNCVPG ) .AND. &
                  PRESENT( qns_pg_curr   ) .AND. PRESENT( qnr_curr    ) .AND. &
#if ( WRF_CHEM == 1 )
                  PRESENT( chem       ) .AND. PRESENT(dgnum4D      )  .AND. &
                  PRESENT( dgnumwet4D ) .AND.                           &
#endif
                  PRESENT( qni_pg_curr   ) .AND. PRESENT( RAINNCPG ) ) THEN
#if ( WRF_CHEM == 1 )
                qv_b4mp(its:ite,kts:kte,jts:jte) = qv_pg_curr(its:ite,kts:kte,jts:jte)
                qc_b4mp(its:ite,kts:kte,jts:jte) = qc_pg_curr(its:ite,kts:kte,jts:jte)
                qi_b4mp(its:ite,kts:kte,jts:jte) = qi_pg_curr(its:ite,kts:kte,jts:jte)
                qs_b4mp(its:ite,kts:kte,jts:jte) = qs_pg_curr(its:ite,kts:kte,jts:jte)
#endif
                  
                CALL CAMMGMP(ITIMESTEP=itimestep,DT=dt,P8W=p8w_hyd,P_HYD=p_hyd    &
                     ,T_PHY=t_phy_pg,PI_PHY=pi_phy,Z_AT_W=z_at_w,QFX=qfx             &
                     ,TKE_PBL=tke_pbl,TURBTYPE3D=turbtype3d,SMAW3D=smaw3d     &
                     ,DLF3D=dlf,DLF2_3D=dlf2,RLIQ2D=rliq,Z_SEA_LEVEL=z            &
                     ,KVH3D=exch_h,HT=ht,ALT=alt,ACCUM_MODE=accum_mode            &
                     ,AITKEN_MODE=aitken_mode,COARSE_MODE=coarse_mode             &
                     ,ICWMRSH3D=icwmrsh3d,ICWMRDP3D=icwmrdp3d,SHFRC3D=shfrc3d     &
                     ,CMFMC3D=cmfmc3d,CMFMC2_3D=cmfmc2_3d                         &
                     ,CONFIG_FLAGS=config_flags,F_ICE_PHY=f_ice_phy               &
                     ,F_RAIN_PHY=f_rain_phy                                       &
#if ( WRF_CHEM == 1 )
                     ,DGNUM4D=dgnum4D,DGNUMWET4D=dgnumwet4D                       &
#endif
                     ,IDS=ids,IDE=ide, JDS=jds,JDE=jde, KDS=kds,KDE=kde           &
                     ,IMS=ims,IME=ime, JMS=jms,JME=jme, KMS=kms,KME=kme           &
                     ,ITS=its,ITE=ite, JTS=jts,JTE=jte, KTS=kts,KTE=kte           &
!Output variables from CAMMGMP
                     ,TH=th_pg,CLDFRA_OLD_MP=cldfra_old_mp,CLDFRA_MP=cldfra_mp       &
                     ,CLDFRA_MP_ALL=cldfra_mp_all,lradius=lradius,iradius=iradius &
                     ,CLDFRAI=cldfrai,CLDFRAL=cldfral                             &
                     ,CLDFRA_CONV=cldfra_conv,WSEDL3D=wsedl3d                     &
                     ,RAINNC=RAINNCPG,RAINNCV=RAINNCVPG,SNOWNC=SNOWNCPG,SNOWNCV=SNOWNCVPG &
                     ,SR=sr_pg,qv_curr=qv_pg_curr,qc_curr=qc_pg_curr,qi_curr=qi_pg_curr       &
                     ,qs_curr=qs_pg_curr,qr_curr=qr_pg_curr,NC3D=qnc_pg_curr               &
                     ,NI3D=qni_pg_curr,NS3D=qns_pg_curr,NR3D=qnr_pg_curr,QNDROP=qndrop_pg_curr&
                     ,RH_OLD_MP=rh_old_mp,LCD_OLD_MP=lcd_old_mp                   &
#if ( WRF_CHEM == 1 )
                     ,CHEM=chem                                                   &
                     ,QME3D=qme3d,PRAIN3D=prain3d,NEVAPR3D=nevapr3d               &
                     ,RATE1ORD_CW2PR_ST3D=rate1ord_cw2pr_st3d                     &
#endif
                     ,XLAND=XLAND,SNOWH=SNOWH                                     &
                     )
             ELSE
                CALL wrf_error_fatal ( 'arguments not present for calling CAMMGMP SCHEME piggybacking' )
             ENDIF
#endif

      CASE DEFAULT

         WRITE( wrf_err_message , * ) 'The microphysics option does not exist: mp_physics_pg = ', mp_physics_pg
         CALL wrf_error_fatal ( wrf_err_message )

      END SELECT piggy_micro_select   
   ENDIF	
   ENDDO
   !$OMP END PARALLEL DO

#ifdef XEON_OPTIMIZED_WSM5
   ENDIF
#endif

! by ZCX
! IF ( PRESENT (LWP) ) THEN
!   DO ij = 1 , num_tiles
!      its = i_start(ij)
!      ite = i_end(ij)
!      jts = j_start(ij)
!      jte = j_end(ij)
!      DO j=jts,jte
!      DO i=its,ite
!         lwp(i,j) = 0.0
!         do k=kts,kte
!           lwp(i,j)=lwp(i,j)+qc_curr(i,k,j)*rho(i,k,j)*dz8w(i,k,j)
!         end do
!      ENDDO
!      ENDDO
!   ENDDO
! ENDIF
! ZCX

   CALL wrf_debug ( 200 , 'microphysics_driver: returning from' )

   RETURN

   END SUBROUTINE microphysics_driver

END MODULE module_microphysics_driver
